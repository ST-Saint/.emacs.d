#+TITLE emacs config
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :results none

* patch
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
;; (setq user-full-name "meow")
;; (setq user-login-name "meow")
;; (setq user-real-login-name "meow")
;; (setq user-emacs-directory "/home/meow/.emacs.d")
(setq custom-file (concat (file-name-as-directory user-emacs-directory) "custom.el"))


;; Automatically tangle our Emacs.org config file when we save it
(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name) (concat (file-truename user-emacs-directory) "config.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src


* package

+ [ ] after load with-eval-after-load
+ [ ] quelpa force git fetcher

** use-package
#+begin_src emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; (let ((packages (directory-files "/home/meow/.emacs.d/packages" nil directory-files-no-dot-files-regexp)))
;;   (dolist (package packages)
;;     (add-to-list 'load-path (concat "/home/meow/.emacs.d/packages/" package))))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** quelpa
#+begin_src emacs-lisp
(use-package quelpa)
#+end_src


* emacs
#+begin_src emacs-lisp
(use-package emacs)
(setq-default c-basic-offset 'set-from-style)
(setq c-default-style '(
                        (c-mode . "linux")
                        (cc-mode . "linux")
                        (java-mode . "java")
                        (awk-mode . "awk")
                        (python-mode . "python")
                        (others . "gnu")))
#+end_src

* handy

** customize
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)

(save-place-mode 't)

(global-hl-line-mode 't)

(setq compilation-scroll-output t)

(add-hook 'before-save-hook #'whitespace-cleanup)

(setq use-dialog-box nil)

(recentf-mode t)
(setq recentf-max-saved-items nil)

(setq-default indent-tabs-mode nil)
(setq electric-indent-mode nil)

(unless (display-graphic-p)
    (server-start))

(use-package helpful
  :config
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)
  (global-set-key (kbd "C-h C") #'helpful-command)
  (global-set-key (kbd "C-h p") #'describe-package)
  )

(defun open-config-file ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(defun copy-file-name ()
  (interactive)
  (let ((path nil))
    (if (eq major-mode 'dired-mode)
        (setq path (dired-current-directory))
      (setq path (buffer-file-name)))
    (message path)
    (kill-new path)
    path))

(defun delete-current-file ()
  (interactive)
  (delete-file (copy-file-name)))

(defun open-current-file-as-root ()
  (interactive)
  (find-file (concat "/sudo::" (copy-file-name))))

(use-package restart-emacs
  :after meow
  :config
  (meow-leader-define-key
   '("r r" . restart-emacs)))

(use-package which-function-mode
  :ensure nil
  :hook
  (prog-mode . which-function-mode))

(use-package scratch)
#+end_src

** scroll
#+begin_src emacs-lisp
(setq scroll-conservatively 101
      scroll-step 1
      scroll-margin 3
      hscroll-margin 2
      hscroll-step 1
      scroll-preserve-screen-position t
      auto-window-vscroll nil
      mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
      mouse-wheel-scroll-amount-horizontal 2)
#+end_src

** jump
#+begin_src emacs-lisp
(add-hook 'xref-after-jump-hook (lambda () (progn (set-mark-command nil) (deactivate-mark))))
#+end_src

** drag
#+begin_src emacs-lisp
(use-package drag-stuff
  :after meow
  :config
  (meow-normal-define-key
   '("M-<up>" . drag-stuff-up)
   '("M-<down>" . drag-stuff-down)
   '("M-p" . drag-stuff-up)
   '("M-n" . drag-stuff-down))
  (drag-stuff-global-mode t))
#+end_src

** link
#+begin_src emacs-lisp
(use-package link-hint
  :after meow
  :config
  (meow-leader-define-key
   '("o l" . link-hint-open-link)))
#+end_src

** multi-edit
#+begin_src emacs-lisp
(use-package multiple-cursors
  :after meow
  :config
  (meow-leader-define-key
   '("m c l" . mc/edit-lines)
   '("m c a" . mc/mark-all-dwim)
   '("m c r" . mc/mark-all-in-region-regexp)))
#+end_src

** clip
#+begin_src emacs-lisp
(use-package clipetty
  :hook (after-init . global-clipetty-mode)
  :bind ("M-w" . clipetty-kill-ring-save))
#+end_src

** ansi
#+begin_src emacs-lisp
(use-package ansi-color
  :config
  (defun colorize-compilation-buffer ()
    (read-only-mode)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (read-only-mode))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))
#+end_src

* meow
+ beacon doesn't work

#+begin_src emacs-lisp
(use-package meow
  :init
  (defun meow-setup-qwerty ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (setq meow-space-keymap (make-keymap))
    (dolist (keybind '(("b r" revert-buffer)
                       ("f p" open-config-file)
                       ("f f" find-file)
                       ("f y" copy-file-name)
                       ("f d " delete-current-file)
                       ("f U" open-current-file-as-root)
                       ("`" meow-last-buffer)))
      (let ((key (car keybind))
            (func (cadr keybind)))
        (define-key meow-space-keymap key func)
        (meow-leader-define-key (cons key func))))

    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))

    (meow-define-keys 'insert
      '("M-SPC" . meow-keypad))

    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet)
     '("<ESC>" . meow-normal-mode)
     '("<escape>" . meow-normal-mode))

    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-kill)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-search)
     '("S" . meow-visit)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     ;; '("v" . meow-visit)
     '("V" . meow-line)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-delete)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("M-o" . meow-pop-marker)
     '("M-<SPC>" . meow-keypad)
     '("<escape>" . ignore)))

  :config
  (setq meow-replace-state-name-list '((normal . "ಎ·ω·ಎ")
                                       (motion . "ಎ-ω-ಎ")
                                       (keypad . "/ᐠ.ˬ.ᐟ\\")
                                       (insert . "/ᐠ.ꞈ.ᐟ\\")
                                       (beacon . "/ᐠ..ᐟ\\")))

  (set-face-attribute 'meow-normal-indicator nil :weight 'bold)
  (set-face-attribute 'meow-motion-indicator nil :weight 'bold)
  (set-face-attribute 'meow-keypad-indicator nil :weight 'bold)
  (set-face-attribute 'meow-insert-indicator nil :weight 'bold)
  (set-face-attribute 'meow-beacon-indicator nil :weight 'bold)

  (setq meow-keypad-start-keys nil
        meow-keypad-literal-prefix nil
        meow-keypad-meta-prefix nil
        meow-keypad-ctrl-meta-prefix nil)
  (setq meow-use-clipboard t)

  (meow-setup-qwerty)
  (meow-global-mode t)
  )
#+end_src

* ui

** emacs basic
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)


(meow-leader-define-key
 '("l l" . visual-line-mode))

(blink-cursor-mode -1)
(scroll-bar-mode -1)        ; disable visible scrollbar
(tool-bar-mode -1)          ; disable the toolbar
(tooltip-mode -1)           ; disable tooltips
(menu-bar-mode -1)            ; disable the menu bar
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

;; disable line numbers for some modes
(dolist (mode '(term-mode-hook
                vterm-mode-hook
                treemacs-mode-hook
                dashboard-mook-hook
                pdf-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** visual

*** visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :init
  (setq-default visual-fill-column-width 120)
  (setq-default visual-fill-column-center-text t)
  :config
  (meow-leader-define-key
   '("l L" . visual-fill-column-mode)))
#+end_src

** font
#+begin_src emacs-lisp
(set-frame-font "SauceCodePro Nerd Font 16" nil t)

;; FIXME
(set-face-attribute 'default nil :font "SauceCodePro Nerd Font" :height 160)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "SauceCodePro Nerd Font" :height 160)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "DejaVuSansMono Nerd Font Mono" :height 160)
#+end_src

** icon
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** theme
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-one t)
  :config
  (setq doom-modeline-project-detection 'project)
  (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
  )
#+end_src

** dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :config
  (setq dashboard-startup-banner "/home/yayu/org/emacs-dragon.svg"
        dashboard-image-banner-max-height 600)
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq dashboard-week-agenda t)
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))
  (dashboard-setup-startup-hook)
  )
#+end_src

** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 't))
#+end_src

** highlight
+ highlight TODO in code

*** hl-todo
#+begin_src emacs-lisp
(use-package hl-todo
  :config
   (setq hl-todo-keyword-faces
         '(("TODO"   . "#43cd80") ;;  2e8b57 00ee00 32cd32
           ("FIXME"  . "#FF4444")
           ("DEBUG"  . "#A020F0")
           ("GOTCHA" . "#FF4500")
           ("STUB"   . "#1E90FF"))))
#+end_src

*** beacon
+ FIXME keep flashing after consult
#+begin_src emacs-lisp
(use-package beacon
  :config
  (meow-leader-define-key
   '("SPC" . beacon-blink))
  (add-to-list 'beacon-dont-blink-commands #'consult-line)
  (setq beacon-blink-when-window-scrolls nil)
  (beacon-mode nil))
#+end_src

*** rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

*** highlight-indent
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook
  (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-suppress-auto-error 't
        highlight-indent-guides-responsive 'top
        highlight-indent-guides-auto-top-odd-face-perc 60
        highlight-indent-guides-auto-top-even-face-perc 60
        highlight-indent-guides-auto-top-character-face-perc 60))
#+end_src

** which key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))
#+end_src

** keycast
#+begin_src emacs-lisp
(use-package keycast
  :config
  (defun toggle-keycast()
    (interactive)
    (if (member '("" keycast-mode-line " ") global-mode-string)
        (progn (setq global-mode-string (delete '("" keycast-mode-line " ") global-mode-string))
               (remove-hook 'pre-command-hook 'keycast--update))
      (add-to-list 'global-mode-string '("" keycast-mode-line " "))
      (add-hook 'pre-command-hook 'keycast--update t)))
  )
#+end_src

* magit
#+begin_src emacs-lisp
(use-package magit
  :init
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  :config
  (meow-leader-define-key
   '("g g" . magit)))

(use-package magit-todos
  :config
  (define-key magit-todos-section-map (kbd "j T") nil)
  (define-key magit-todos-section-map (kbd "j l") nil)
  (setq magit-todos-section-map nil)
  (setq magit-todos-list-map nil)
  (setq magit-todos-item-section-map nil)
  (magit-todos-mode))
#+end_src

* project
** projectile
#+begin_src emacs-lisp
(use-package ripgrep)

(use-package projectile
  :config
  (setq projectile-indexing-method 'hybrid)
  (setq projectile-sort-order 'recently-active)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'default)

  (meow-leader-define-key
   '("p p" . projectile-switch-project)
   '("p f" . projectile-find-file)
   '("p c" . projectile-compile-project)
   '("p d" . projectile-find-dir)
   '("p i" . projectile-invalidate-cache)
   '("," . projectile-switch-to-buffer))

  (projectile-global-mode t))
#+end_src

* navigate
** isearch
#+begin_src emacs-lisp
(use-package isearch
  :ensure nil
  :bind (:map isearch-mode-map
              ([remap isearch-delete-char] . isearch-del-char))
  :custom
  (isearch-lazy-count t)
  (lazy-count-prefix-format "%s/%s "))
#+end_src

** perspective

+ [ ] create customized sort function

#+begin_src emacs-lisp
(use-package perspective
  :init
  (setq persp-suppress-no-prefix-key-warning t)

  :custom
  (persp-mode-prefix-key nil)
  (persp-sort 'access)
  (persp-modestring-short t)

  :config
  (defun persp-show-persps ()
    (interactive)
    (message (concat "[ "
                     (s-join " | " (persp-names))
                     " ]")))

  (defun projectile-switch-perspective-project (project-to-switch)
    (interactive (list (projectile-completing-read "Switch to project: "
                                                   (projectile-relevant-known-projects))))
    (let* ((name (or projectile-project-name
                   (funcall projectile-project-name-function project-to-switch)))
         (persp (gethash name (perspectives-hash))))
      (cond
       ;; project-specific perspective already exists
       ((and persp (not (equal persp (persp-curr))))
        (persp-switch name))
       ;; persp exists but not match with projectile-name
       ((and persp (not (equal persp name)))
        (persp-switch name)
        (projectile-switch-project-by-name project-to-switch))
       ;; project-specific perspective doesn't exist
       ((not persp)
        (let ((frame (selected-frame)))
        (persp-switch name)
        (projectile-switch-project-by-name project-to-switch)
        ;; Clean up if we switched to a new frame. `helm' for one allows finding
        ;; files in new frames so this is a real possibility.
        (when (not (equal frame (selected-frame)))
          (with-selected-frame frame
            (persp-kill name))))))))


  (defun open-config-file ()
    (interactive)
    (persp-switch "config")
    (find-file "~/.emacs.d/config.org"))


  (define-key global-map [remap projectile-switch-project] 'projectile-switch-perspective-project)

  (meow-leader-define-key
   '("1" . (lambda() (interactive) (persp-switch-by-number 1)))
   '("2" . (lambda() (interactive) (persp-switch-by-number 2)))
   '("3" . (lambda() (interactive) (persp-switch-by-number 3)))
   '("4" . (lambda() (interactive) (persp-switch-by-number 4)))
   '("5" . (lambda() (interactive) (persp-switch-by-number 5)))
   '("6" . (lambda() (interactive) (persp-switch-by-number 6)))
   '("7" . (lambda() (interactive) (persp-switch-by-number 7)))
   '("8" . (lambda() (interactive) (persp-switch-by-number 8)))
   '("9" . (lambda() (interactive) (persp-switch-by-number 9)))
   '("f p" . open-config-file)
   '("w s" . persp-switch)
   '("w w" . persp-show-persps)
   '("w b" . persp-scratch-buffer)
   '("TAB s" . persp-switch)
   '("TAB n" . persp-switch)
   '("TAB `" . persp-switch-last)
   '("TAB TAB" . persp-show-persps)
   '("TAB b" . persp-switch-to-scratch-buffer)
   '("TAB d" . persp-kill)
   '("TAB D" . (lambda () (interactive) (persp-kill (persp-current-name)))))
  (persp-mode))
#+end_src

** centaur-tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :config
  (centaur-tabs-mode 't)
  (setq centaur-tabs-adjust-buffer-order 't)
  (setq centaur-tabs-set-bar 'under)
  (setq x-underline-at-descent-line 't)
  (setq centaur-tabs-set-icons 't)
  (setq centaur-tabs-height 60
        centaur-tabs-bar-height 60)
  (defun centaur-tabs-adjust-buffer-order ()
    (interactive)
    "Put the two buffers switched to the adjacent position after current buffer changed."
    ;; Don't trigger by centaur-tabs command, it's annoying.
    ;; This feature should be trigger by search plugins, such as ibuffer, helm or ivy.
    (unless (or (not centaur-tabs-mode)
                (string-prefix-p "centaur-tabs" (format "%s" this-command))
                (string-prefix-p "mouse-drag-header-line" (format "%s" this-command))
                (string-prefix-p "mouse-drag-tab-line" (format "%s" this-command))
                ;; (string-prefix-p "(lambda (event) (interactive e)" (format "%s" this-command))
                )
      (when (and centaur-tabs-adjust-buffer-order
                 ;; (not (eq (current-buffer) centaur-tabs-last-focused-buffer))
                 (not (minibufferp)))
        ;; Just continue when the buffer has changed.
        (let* ((current (current-buffer))
               (current-group (cl-first (funcall centaur-tabs-buffer-groups-function))))
          ;; Record the last focused buffer.
          (setq centaur-tabs-last-focused-buffer current)

          ;; Just continue if two buffers are in the same group.
          (when (string= current-group centaur-tabs-last-focused-buffer-group)
            (let* ((bufset (centaur-tabs-get-tabset current-group))
                   (current-group-tabs (centaur-tabs-tabs bufset))
                   (current-group-buffers (cl-mapcar 'car current-group-tabs))
                   (current-buffer-index (cl-position current current-group-buffers)))

              (unless (or (not current-buffer-index)
                          (eq current-buffer-index 0))
                (let* ((copy-group-tabs (cl-copy-list current-group-tabs))
                       (current-tab (nth current-buffer-index copy-group-tabs))
                       (first-tab (nth 0 copy-group-tabs))
                       (base-group-tabs (centaur-tabs-remove-nth-element current-buffer-index copy-group-tabs))
                       new-group-tabs)
                  (setq new-group-tabs (centaur-tabs-insert-before base-group-tabs first-tab current-tab))
                  (set bufset new-group-tabs)
                  (centaur-tabs-set-template bufset nil)
                  (centaur-tabs-display-update)))
              ;; If the tabs are not adjacent, swap their positions.
              ))

          ;; Update the group name of the last accessed tab.
          (setq centaur-tabs-last-focused-buffer-group current-group)))))
  (centaur-tabs-group-by-projectile-project)
  (centaur-tabs-enable-buffer-reordering)

  (setq centaur-tabs-cycle-scope 'tabs)
  (meow-normal-define-key
   '("C-<tab>" . centaur-tabs-forward)
   '("C-S-<iso-lefttab>" . centaur-tabs-backward))
  )
#+end_src

** winnum
#+begin_src emacs-lisp
(use-package winum
  :config
  (meow-normal-define-key
   '("M-0" . treemacs-mode)
   '("M-1" . winum-select-window-1)
   '("M-2" . winum-select-window-2)
   '("M-3" . winum-select-window-3)
   '("M-4" . winum-select-window-4)
   '("M-5" . winum-select-window-5)
   '("M-6" . winum-select-window-6)
   '("M-7" . winum-select-window-7)
   '("M-8" . winum-select-window-8)
   '("M-9" . winum-select-window-9))
  (setq winum-scope 'frame-local)
  (winum-mode 't))
#+end_src

** ace-window
#+begin_src emacs-lisp
(use-package ace-window
  :config
  (setq aw-scope 'frame)
  (global-set-key (kbd "C-x o") 'ace-window))
#+end_src

** better-jumper
#+begin_src emacs-lisp
;; (use-package better-jumper
;;   :config
;;   (meow-normal-define-key
;;    '("M-i" . better-jumper-jump-forward)
;;    '("M-o" . better-jumper-jump-backward))
;;   (better-jumper-mode))
#+end_src

* completion

+ [ ] missing a consult selection indicator

** emacs-completion
#+begin_src emacs-lisp

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; disable cursor blink
  (setq cursor-blink-mode nil)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  ;; (setq tab-always-indent 'complete)
  )
#+end_src

** consult

#+begin_src emacs-lisp
(use-package consult
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  ;; (setq register-preview-delay 0.5
  ;;       register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   consult-ripgrep consult-git-grep consult-grep consult-xref
   :preview-key '(:debounce 0.1 any)
   consult-bookmark consult-recent-file
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well. >
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;; 2. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))

  (add-hook 'consult-after-jump-hookd (lambda () (progn (set-mark-command nil) (deactivate-mark))))

  (defun consult-ripgrep-at-point ()
    (interactive)
    (meow-mark-symbol 0)
    (let ((symbol (buffer-substring-no-properties (region-beginning) (region-end))))
      (consult-ripgrep nil symbol)))

  (defun consult-line-at-point ()
    (interactive)
    (meow-mark-symbol 0)
    (let ((symbol (buffer-substring-no-properties (region-beginning) (region-end))))
      (consult-line symbol)))

  (meow-leader-define-key
   '("s s" . consult-line)
   '("s S" . consult-line-at-point)
   '("s i" . consult-imenu)
   '("f r" . consult-recent-file)
   '("s r" . consult-ripgrep)
   '("s R" . consult-ripgrep-at-point)
   '("s <SPC>" . consult-mark)
   '("s C-<SPC>" . consult-global-mark))
  )
#+end_src

** vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  ;; Show more candidates
  (setq vertico-count 20)
  (vertico-mode)
  )

(use-package savehist
  :init
  (savehist-mode))
#+end_src

** orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))
        orderless-component-separator #'orderless-escapable-split-on-space))
#+end_src


** embark
#+begin_src emacs-lisp

(use-package embark
  :bind
  (
   ;; ("C-." . embark-act)         ;; pick some comfortable binding
   ;; ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package marginalia
  :config
  (setq marginalia-command-categories
        (append '((projectile-find-file . project-file)
                  (projectile-find-dir . project-file)
                  (projectile-switch-to-buffer . buffer)
                  (projectile-switch-project . file))
                marginalia-command-categories))
  (marginalia-mode t))

(use-package wgrep)


;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** corfu

#+begin_src emacs-lisp
(use-package corfu
  :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?`)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect-first t)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  (corfu-auto-delay 0.5)
  (corfu-scroll-margin 5)        ;; Use scroll margin

  :bind
  (:map corfu-map
        ("M-SPC" . corfu-insert-separator)
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))

  :init
  (global-corfu-mode))

;; FIXME don't know
(use-package corfu-info
  :ensure nil)

(use-package cape
  ;; :bind (("C-c p p" . completion-at-point) ;; capf
  ;;  ("C-c p t" . complete-tag)        ;; etags
  ;;  ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
  ;;  ("C-c p h" . cape-history)
  ;;  ("C-c p f" . cape-file)
  ;;  ("C-c p k" . cape-keyword)
  ;;  ("C-c p s" . cape-symbol)
  ;;  ("C-c p a" . cape-abbrev)
  ;;  ("C-c p i" . cape-ispell)
  ;;  ("C-c p l" . cape-line)
  ;;  ("C-c p w" . cape-dict)
  ;;  ("C-c p \\" . cape-tex)
  ;;  ("C-c p _" . cape-tex)
  ;;  ("C-c p ^" . cape-tex)
  ;;  ("C-c p &" . cape-sgml)
  ;;  ("C-c p r" . cape-rfc1345)
  ;;  )
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; (add-to-list 'completion-at-point-functions #'cape-line)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)

  ;; Cape provides the adapter `cape-company-to-capf' for Company backends.
  ;; (setq-local completion-at-point-functions
  ;;             (mapcar #'cape-company-to-capf
  ;;                     (list #'company-files #'company-ispell #'company-dabbrev)))
  )

(use-package corfu-doc
  :hook
  (corfu-mode. corfu-doc-mode)
  :bind
  (:map corfu-map
        ;; corfu-next
        ("M-p" . 'corfu-doc-scroll-down)
        ;; corfu-previous
        ("M-n" . 'corfu-doc-scroll-up)))

(use-package kind-icon
  :after corfu
  :custom
  ;; to compute blended backgrounds correctly
  (kind-icon-default-face 'corfu-default)
  :config
  (setq kind-icon-default-style
        '(:padding -1 :stroke 0 :margin 0 :radius 0 :height 0.5 :scale 1))
  (setq kind-icon-use-icons t)
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
;; :config
;; (add-hook 'my-completion-ui-mode-hook
;;           (lambda ()
;;             (setq completion-in-region-function
;;                   (kind-icon-enhance-completion
;;                    completion-in-region-function)))))
#+end_src

***  corful-terminal
#+begin_src emacs-lisp
(quelpa '(popon
          :fetcher git
          :url "https://codeberg.org/akib/emacs-popon.git"))
(quelpa '(corfu-terminal
          :fetcher git
          :url "https://codeberg.org/akib/emacs-corfu-terminal.git"))

(use-package popon)
(use-package corfu-terminal
  :after popon)
#+end_src


** template
+ [ ] maybe yasnippet
#+begin_src emacs-lisp :tangle no
(use-package tempel
  ;; Require trigger prefix before template name when completing.
  :custom
  (tempel-trigger-prefix "<")

  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert)
         ("M-p" . tempel-previous)
         ("M-n" . tempel-next))

  :init
  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  (global-tempel-abbrev-mode))
#+end_src

** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets)
#+end_src

* org
#+begin_src emacs-lisp
(use-package org
  :bind
  (:map org-mode-map
        ("C-M-<return>" . org-insert-subheading))

  :init
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (org . t)
     (shell . t)
     (C . t)
     ;; (latex . t)
     (python . t)
     (dot . t)
     (awk . t)
     ))
  (if (display-graphic-p)
    (setq org-startup-indented t))
  (setq org-special-ctrl-a/e 'reversed)
  (setq org-edit-src-content-indentation 0)
  (setq org-cycle-separator-lines 1)
  (setq org-return-follows-link t)
  (setq org-src-window-setup 'current-window)
  (setq org-confirm-babel-evaluate nil)
  (setq org-insert-heading-respect-content t)
  (setq org-log-done t)
  (setq org-imenu-depth 4)

  (setq org-list-demote-modify-bullet
        '(("+" . "-") ("-" . "+") ("*" . "+")))
  (setq org-ellipsis " ר")

  (setq org-directory "/home/yayu/org/")
  (meow-leader-define-key
   '("n L" . org-store-link))
  )
#+end_src

** org-reveal
#+begin_src emacs-lisp
(use-package ox-reveal
  :config
  (setq org-reveal-theme "blood")
  (setq org-reveal-transition "slide")
  (setq org-reveal-width 1920)
  (setq org-reveal-height 1080)
  (setq org-reveal-margin "0.1")
  (setq org-reveal-min-scale "0.2")
  (setq org-reveal-max-scale "1.5")
  (setq org-reveal-plugins '(markdown notes search zoom))
  (setq org-reveal-control 't)
  (setq org-reveal-center 't)
  (setq org-reveal-progress 't)
  (setq org-reveal-history nil))
#+end_src

** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :config
  (setq org-roam-directory "/home/yayu/org/")
  (setq org-roam-completion-everywhere t)
  (org-roam-db-autosync-mode))
#+end_src

* code
** format
#+begin_src emacs-lisp
(use-package format-all
  :config
  (setq format-all-ensure-formatter t)
  (meow-leader-define-key
   '("c f" . format-all-buffer)))
#+end_src

** pair

*** smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :hook
  (text-mode . smartparens-mode)
  (prog-mode . smartparens-mode))
#+end_src


** hideshow
#+begin_src emacs-lisp
(use-package hs-minor-mode
  :ensure nil
  :hook
  (prog-mode . hs-minor-mode)
  :init
  (meow-leader-define-key
   '("TAB C-t" . hs-toggle-hiding)))
#+end_src

* flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :hook (prog-mode . flycheck-mode))
#+end_src

** flyspell-correct
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src

* language

** english

** lsp
#+begin_src emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-completion-provider :none) ;; we use Corfu!

  :init
  (defun orderless-dispatch-flex-first (_pattern index _total)
    (and (eq index 0) 'orderless-flex))

  (defun lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))

  ;; Optionally configure the first word as flex filtered.
  (add-hook 'orderless-style-dispatchers #'orderless-dispatch-flex-first nil 'local)

  ;; Optionally configure the cape-capf-buster.
  (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))
  (setq lsp-enable-file-watchers nil)
  (setq lsp-enable-on-type-formatting nil)

  (meow-leader-define-key
   '("c l S" . lsp)
   '("c l s" . consult-lsp-symbols)
   '("c l d" . lsp-find-definition)
   '("c l r" . lsp-find-references)
   '("c l F" . lsp-format-buffer)
   '("c l R" . lsp-rename)
   '("c l q" . lsp-workspace-shutdown)
   '("c l Q" . lsp-workspace-restart)
   '("c l a" . lsp-execute-code-action)
   '("c l o" . lsp-organize-imports)
   '("c l i" . lsp-find-implementation))

  :hook
  (lsp-completion-mode . lsp-mode-setup-completion))
#+end_src

*** consult-lsp
#+begin_src emacs-lisp
(use-package consult-lsp)
#+end_src

** elisp(emacs-lisp)
#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook
  (emacs-lisp-mode . aggressive-indent-mode))
#+end_src

** cc
#+begin_src emacs-lisp
(use-package cc-mode
  :hook
  (c-mode . lsp)
  :config
  (setq lsp-clients-clangd-args
        '("-j=3"
          "--background-index"
          "--clang-tidy"
          "--completion-style=detailed"
          "--header-insertion=never"
          "--header-insertion-decorators=0")))
#+end_src

*** citre

#+begin_src emacs-lisp
(use-package citre
  :config
  (require 'citre-config))
#+end_src

*** gtags

#+begin_src emacs-lisp
(use-package ggtags
  :config
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode)
                (ggtags-mode 1)))))
#+end_src

** java

#+begin_src emacs-lisp
(use-package lsp-java
  :config
  (add-hook 'java-mode-hook #'lsp)
  (setq lsp-java-format-on-type-enabled nil)
  (setq lsp-java-format-comments-enabled nil)
  (setq lsp-java-autobuild-enabled 't)
  (setq lsp-java-java-path "/usr/lib/jvm/java-11-openjdk/bin/java")
  (setq lsp-java-configuration-runtimes '[
                                          (:name "JavaSE-11"
                                                 :path "/usr/lib/jvm/java-11-openjdk/")
                                          (:name "JavaSE-1.8"
                                                 :path "/usr/lib/jvm/java-8-openjdk/"
                                                 :default t)
                                          ])
  (advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))
  (setq lsp-java-vmargs '("-XX:+UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90" "-Xmx8G" "-Xms1024m"))
  )
#+end_src


* pdf

** pdf-tools
#+begin_src emacs-lisp
(quelpa '(pdf-tools
          :fetcher github
          :repo "dalanicolai/pdf-tools"
          :branch "pdf-roll"
          :files ("lisp/*.el"
                  "README"
                  ("build" "Makefile")
                  ("build" "server")
                  (:exclude "lisp/tablist.el" "lisp/tablist-filter.el"))))


(use-package pdf-tools
  :ensure nil
  :config
  (pdf-tools-install))
#+end_src


** image-roll
#+begin_src emacs-lisp
(quelpa '(image-roll
            :fetcher github
            :repo "dalanicolai/image-roll.el"))
;; (use-package image-roll)
#+end_src

** org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :init
  (setq org-noter-notes-search-path (list (concat org-directory "thesis/note")))
  (setq org-noter-always-create-frame nil)
  (setq org-noter-doc-split-fraction '(0.6 . 0.4))
  :config
  (meow-leader-define-key
   '("n o" . org-noter)))
#+end_src

** org-pdftools
#+begin_src emacs-lisp

(quelpa '(org-pdftools
            :fetcher github
            :repo "ST-Saint/org-pdftools"))

(use-package org-pdftools
  :ensure nil
  :after pdf-tools
  :hook (org-mode . org-pdftools-setup-link))

(quelpa '(org-noter-pdftools
            :fetcher github
            :repo "ST-Saint/org-pdftools"))

(use-package org-noter-pdftools
  :ensure nil
  :after org-pdftools
  :bind
  (:map org-noter-notes-mode-map
        ("C-." . #'org-noter-pdftools-activate-org-note)
        ("M-." . #'org-noter-pdftools-embed-org-note-to-pdf))
  (:map pdf-view-mode-map
        ("C-c m i i" . #'org-noter-pdftools-insert-precise-note-underline)
        ("C-c m i u" . #'org-noter-pdftools-insert-precise-note-underline)
        ("C-c m i h" . #'org-noter-pdftools-insert-precise-note-highlight)
        ("C-c m i s" . #'org-noter-pdftools-insert-precise-note-squiggly)
        ("C-a" . #'pdf-view-align-left)
        ("C-e" . #'pdf-view-align-right)
        ("M-i" . #'org-noter-pdftools-insert-precise-note-underline)
        ("C-l" . #'pdf-view-center-in-window))

  :config
  (setq org-noter-pdftools-insert-content-heading nil)

  (with-eval-after-load 'pdf-annot (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

* shell
** vterm
#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq shell-file-name "/bin/bash")
  (setq vterm-shell "/usr/bin/zsh")

  (setq vterm-max-scrollback 65536)
  (meow-leader-define-key
   '("o t" . vterm)))
#+end_src

* undo
** undo-fu-session
#+begin_src emacs-lisp
(use-package undo-fu)
(use-package undo-fu-session
  :config
  (global-undo-fu-session-mode))
#+end_src

** vundo
#+begin_src emacs-lisp
(use-package vundo)
#+end_src

* email
** mu4e
#+begin_src emacs-lisp
(use-package pinentry
  :init
  (setq epg-pinentry-mode 'loopback))

(use-package mu4e
  :ensure nil
  :after pinentry
  :config
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-confirm-quit nil)

  (setq mail-user-agent 'mu4e-user-agent
        read-mail-command 'mu4e)

  (setq mu4e-update-interval 120
        mu4e-index-update-error-continue 't
        mu4e-index-update-error-warning 't
        mu4e-index-update-in-background 't
        mu4e-html2text-command 'mu4e-shr2text)

  (setq mu4e-headers-include-related nil
        mu4e-headers-fields '(
                              (:human-date . 12)
                              (:flags . 10)
                              (:mailing-list . 15)
                              (:from-or-to . 25)
                              (:subject)))

  (add-hook 'mu4e-context-changed-hook #'mu4e)

  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-contexts
        (list
         (make-mu4e-context
          :name "gmail"
          :match-func (lambda (msg)
                        (when msg
                          (string-match-p "/gmail" (mu4e-message-field msg :maildir))))

          :vars '((user-mail-address . "st.saint.wyy@gmail.com"  )
                  (user-full-name . "Yayu Wang" )
                  (smtpmail-smtp-user "st.saint.wyy@gmail.com")
                  (smtpmail-smtp-server "smtp.gmail.com")
                  (mu4e-sent-folder       . "/gmail/sent")
                  (mu4e-drafts-folder     . "/gmail/drafts")
                  (mu4e-trash-folder      . "/gmail/trash")
                  (mu4e-refile-folder     . "/gmail/all")
                  (mu4e-bookmarks . (
                                     (:name "Important" :query "maildir:/gmail/Important" :key ?i)
                                     (:name "Unread messages" :query "maildir:/gmail/All flag:unread AND NOT flag:trashed" :key ?u)
                                     (:name "Today's messages" :query "maildir:/gmail/All date:today..now" :key ?t)
                                     (:name "Last 7 days" :query "maildir:/gmail/All date:7d..now" :key ?w)
                                     (:name "Last month" :query "maildir:/gmail/All date:4w..now" :key ?m)
                                     (:name "Messages with attachments" :query "maildir:/gmail/All flag:attach" :key ?a)
                                     (:name "Flagged messages" :query "maildir:/gmail/All flag:flagged" :key ?f)))
                  (mu4e-maildir-shortcuts . ( (:maildir "/gmail/INBOX" :key ?b)
                                              (:maildir "/gmail/sent"  :key ?s)
                                              (:maildir "/gmail/drafts"      :key ?d)
                                              (:maildir "/gmail/trash"      :key ?t)
                                              (:maildir "/gmail/all"   :key ?a)))
                  ))

         (make-mu4e-context
          :name "ubc"
          :match-func (lambda (msg)
                        (when msg
                          (string-match-p "/UBC" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "yayuwang@cs.ubc.ca" )
                  (user-full-name . "Yayu Wang" )
                  (smtpmail-smtp-user "yayuwang@cs.ubc.ca")
                  (smtpmail-smtp-server "mail.cs.ubc.ca")
                  (mu4e-sent-folder       . "/UBC/Sent")
                  (mu4e-drafts-folder     . "/UBC/Draft")
                  (mu4e-trash-folder      . "/UBC/Trash")
                  (mu4e-refile-folder     . "/UBC/All")
                  (mu4e-bookmarks . (
                                     (:name "Unread messages" :query "maildir:/UBC/Inbox flag:unread AND NOT flag:trashed" :key ?u)
                                     (:name "Today's messages" :query "maildir:/UBC/Inbox date:today..now" :key ?t)
                                     (:name "Last 7 days" :query "maildir:/UBC/Inbox date:7d..now" :key ?w)
                                     (:name "Last month" :query "maildir:/UBC/Inbox date:4w..now" :key ?m)
                                     (:name "Messages with attachments" :query "maildir:/UBC/Inbox flag:attach" :key ?a)
                                     (:name "Flagged messages" :query "maildir:/UBC/Inbox flag:flagged" :key ?f)))
                  (mu4e-maildir-shortcuts . ((:maildir "/UBC/Inbox" :key ?i)
                                             (:maildir "/UBC/Sent" :key ?s)
                                             (:maildir "/UBC/Draft" :key ?d)
                                             (:maildir "/UBC/Trash" :key ?t)))
                  ))))

  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
        smtpmail-debug-info 't
        smtpmail-stream-type 'ssl
        smtpmail-smtp-service 465
        mail-specify-envelope-from 't
        mail-envelope-from 'header
        message-sendmail-envelope-from 'header
        message-sendmail-f-is-evil 't
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail)

  (meow-leader-define-key
   '("o m" . (lambda () (interactive) (persp-switch "mu4e") (mu4e))))

  (if (display-graphic-p)
      (progn
        (pinentry-start)
        (mu4e 't))))
#+end_src
** org-msg
#+begin_src emacs-lisp
(use-package org-msg
  :config
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt "\nHi%s,\n\n"
        org-msg-recipient-names '(("yayuwang@cs.ubc.ca" . "Yayu Wang"))
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '((new		. (text html))
                                       (reply-to-html	. (text html))
                                       (reply-to-text	. (text)))
        org-msg-convert-citation t)
  (setq org-msg-signature "#+begin_signature\nBest,\n\n-- *Yayu*\n#+end_signature")
  (org-msg-mode))
#+end_src


* misc
** subword
#+begin_src emacs-lisp
(use-package subword
  ;; :hook (after-init . global-subword-mode)
  )
#+end_src

* debug
** gdb
#+begin_src emacs-lisp
(setq gdb-stack-buffer-addresses t)
#+end_src

** commond-log
#+begin_src emacs-lisp
(use-package command-log-mode
  :custom
  (command-log-mode-key-binding-open-log nil))
#+end_src
