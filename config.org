#+TITLE: emacs config
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :results none

* config.org
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
(setq custom-file (concat (file-name-as-directory user-emacs-directory) "custom.el"))

(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name) (concat (file-truename user-emacs-directory) "config.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(defun open-config-file ()
  (interactive)
  (let ((config-file (concat (file-truename user-emacs-directory) "config.org")))
    (if (equal config-file (buffer-file-name))
        (delete-other-windows)
      (find-file config-file))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

* system
#+begin_src emacs-lisp
(setq mac-command-modifier 'meta)
#+end_src

* package

+ [ ] after load with-eval-after-load

** use-package
#+begin_src emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
#+end_src

** auto-package-update
#+begin_src emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-prompt-before-update t))
#+end_src

* FIXME FIX
#+begin_src emacs-lisp
(defun package--print-email-button (RECIPIENT))
#+end_src

* startup
#+begin_src emacs-lisp
(use-package benchmark-init
  :ensure t
  :config
  (add-hook 'after-init-hook 'benchmark-init/deactivate))

(or (server-mode)
    (server-start))
#+end_src

* miao

#+begin_src emacs-lisp
(use-package miao
  :load-path "~/Project/miao/"
  :config
  (miao-global-mode)
  (setq miao-modeline-indicators '((normal . "ಎ/ᐠ.ˬ.ᐟ\\ಎ")
                                   (insert . "ಎ/ᐠ.ꞈ.ᐟ\\ಎ")
                                   (leader . "ಎ/ᐠ.ˍ.ᐟ\\ಎ")
                                   (bypass . "ಎ/ᐠ. .ᐟ\\ಎ")))

  (with-eval-after-load "doom-modeline"
    (defun doom-modeline-segment--modals ()
      (miao-indicator)))

  (defun delete-buffer-file ()
    (interactive)
    (delete-file (copy-file-name)))

  (defun root-open-buffer-file ()
    (interactive)
    (find-file (concat "/sudo::" (copy-file-name))))

  (defun toggle-visual-truncate-line ()
    (interactive)
    (if visual-line-mode
        (progn (visual-line-mode -1)
               (toggle-truncate-lines t))
      (toggle-truncate-lines nil)
      (visual-line-mode t)))

  (add-to-list 'isearch-forward-thing-at-point 'word)

  (define-key minibuffer-mode-map (kbd "C-M-<backspace>") #'backward-kill-sexp)

  (miao-define-keys 'normal
    '("b" . backward-word)
    '("f" . forward-word)
    '("x" . miao-delete-char)
    '("v" . miao-mark-line)
    '("q" . miao-quit-window)
    '("Q" . miao-delete-window)
    '("w" . miao-mark-word)
    '("W" . miao-mark-symbol)
    '("o" . miao-mark-list-inner)
    '("O" . miao-mark-list)
    '("n" . miao-next-item)
    '("N" . miao-prev-item)
    '("." . miao-mark-string-inner)
    '(";" . miao-toggle-mark-point))
  (miao-define-keys 'insert
    '("M-SPC" . miao-leader-mode))
  (miao-leader-define-keys
    '("b r" . revert-buffer)
    '("f r" . recentf)
    '("f R" . rename-visited-file)
    '("f f" . find-file)
    '("f y" . copy-file-name)
    '("f D" . delete-buffer-file)
    '("f U" . root-open-buffer-file)
    '("f p" . open-config-file)
    '("g g" . magit)
    '("g f" . magit-find-file)
    '("l l" . toggle-visual-truncate-line)
    '("<SPC>" . miao-cursor-blink)))
#+end_src

* customize
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)

(global-hl-line-mode 't)

(column-number-mode t)

(setq compilation-scroll-output t)

(add-hook 'before-save-hook #'whitespace-cleanup)

(add-hook 'prog-mode-hook #'visual-line-mode)

(setq use-dialog-box nil)

(setq window-resize-pixelwise t)

(setq frame-resize-pixelwise t)

(save-place-mode t)

(recentf-mode t)

(setq confirm-kill-emacs 'y-or-n-p)

(setq recentf-max-saved-items nil)

(setq-default indent-tabs-mode nil)

(setq byte-compile-warnings nil
      native-comp-async-report-warnings-errors nil)

(setq auth-sources '("~/.authinfo.gpg"))
(setq ring-bell-function 'ignore)

(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t     ; Don't delink hardlinks
  version-control t       ; Use version numbers on backups
  delete-old-versions t   ; Automatically delete excess backups
  kept-new-versions 20    ; how many of the newest versions to keep
  kept-old-versions 5)    ; and how many of the old


; lsp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq gc-cons-threshold 100000000)

(defun copy-file-name ()
  (interactive)
  (let ((path nil))
    (if (eq major-mode 'dired-mode)
        (setq path (dired-current-directory))
      (setq path (buffer-file-name)))
    (message path)
    (kill-new path)
    path))

(defun delete-current-file ()
  (interactive)
  (delete-file (copy-file-name)))

(defun open-current-file-as-root ()
  (interactive)
  (find-file (concat "/sudo::" (copy-file-name))))

(defun date-time()
  (interactive)
  (insert (format-time-string "%a %b %d %H:%M:%S %Z %Y")))

(use-package which-func
  :ensure nil
  :hook
  (prog-mode . which-function-mode))
#+end_src

** scratch
#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :config
  (defun project-scratch ()
    (interactive)
    (let* ((project (project-name (project-current)))
           (scratch-buffer-name (format "*scratch* <%s>" project))
           (project-scratch-buffer (get-buffer scratch-buffer-name)))
      (if project-scratch-buffer
          (pop-to-buffer project-scratch-buffer)
        (progn
          (pop-to-buffer (get-buffer-create scratch-buffer-name)))
        (org-mode))))

  (miao-leader-define-keys
    '("b s" . scratch-buffer)
    '("p s" . project-scratch)))
#+end_src

** restart
#+begin_src emacs-lisp
(use-package restart-emacs
  :ensure t
  :config
  (miao-leader-define-keys
   '("q q" . save-buffers-kill-emacs)
   '("q r" . restart-emacs)
   '("r r" . restart-emacs)))
#+end_src


** long-line
#+begin_src emacs-lisp
(setq-default bidi-display-reordering nil)
(setq bidi-inhibit-bpa t
      long-line-threshold 1000
      large-hscroll-threshold 1000
      syntax-wholeline-max 1000)
#+end_src

* ui

** emacs basic
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

(blink-cursor-mode -1)
(scroll-bar-mode -1)        ; disable visible scrollbar
(tool-bar-mode -1)          ; disable the toolbar
(tooltip-mode -1)           ; disable tooltips
(menu-bar-mode -1)          ; disable the menu bar

(setq scroll-conservatively 10000
      scroll-margin 3)

(setq-default truncate-lines t)
(setq isearch-lazy-count t)
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)

;; disable line numbers for some modes
(dolist (mode '(term-mode-hook
                vterm-mode-hook
                dired-mode-hook
                treemacs-mode-hook
                dashboard-mook-hook
                so-long-mode-hook
                pdf-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode -1))))
#+end_src

** theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t)
  (eval-after-load 'hl-line
    (set-face-attribute 'hl-line nil :inherit nil :background "#1c1e24"))
  (set-face-attribute 'region nil :background "#4F5766"))
#+end_src


** color
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** font
#+begin_src emacs-lisp
(set-frame-font "SauceCodePro Nerd Font Mono 18" nil t)

(defun set-font-size (font-size)
  (interactive "nFont-size: ")
  (set-face-attribute 'default nil :height (* font-size 10)))

(set-font-size 18)
;; ;; FIXME
;; (set-face-attribute 'default nil :font "SauceCodePro Nerd Font" :height 160)

;; ;; Set the fixed pitch face
;; (set-face-attribute 'fixed-pitch nil :font "SauceCodePro Nerd Font" :height 160)

;; ;; Set the variable pitch face
;; (set-face-attribute 'variable-pitch nil :font "DejaVuSansMono Nerd Font Mono" :height 160)
#+end_src


** doom-modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (setq doom-modeline-project-detection 'project)
  (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
  (doom-modeline-mode 't))
#+end_src

** dirvish
#+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t)

(use-package dirvish
  :ensure t
  :config
  (setq dirvish-mode-line-format
        '(:left (sort symlink) :right (omit yank index)))
  (setq dirvish-use-mode-line t
        dirvish-use-header-line nil
        dirvish-mode-line-height 23)
  (setq dirvish-attributes
        '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg))
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")
  (define-key dired-mode-map (kbd "j") nil)
  (bind-keys :map dirvish-mode-map
             ("b"   . dirvish-quick-access)
             ("f"   . dirvish-fd)
             ("y"   . dirvish-yank-menu)
             ("N"   . dirvish-narrow)
             ("^"   . dirvish-history-last)
             ("H"   . dirvish-history-jump) ; remapped `describe-mode'
             ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
             ("^"   . dired-up-directory)
             ("TAB" . dirvish-subtree-toggle)
             ("h"   . dirvish-history-go-forward)
             ("l"   . dirvish-history-go-backward)
             ("M-l" . dirvish-ls-switches-menu)
             ("M-m" . dirvish-mark-menu)
             ("T" . dirvish-layout-toggle))

  (dirvish-override-dired-mode))
#+end_src

** dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (let ((emacs-dragon (concat (file-truename user-emacs-directory) "emacs-dragon.png")))
    (if (file-exists-p emacs-dragon)
        (setq dashboard-startup-banner emacs-dragon)))
  (setq dashboard-image-banner-max-height (/ (display-pixel-height) 8))
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq dashboard-week-agenda t)
  (setq dashboard-projects-backend 'project-el)
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 10)
                          (registers . 5)))
  (defun dashboard ()
    (interactive)
    (switch-to-buffer dashboard-buffer-name)
    (delete-other-windows))
  (dashboard-setup-startup-hook))
#+end_src

** visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t
  :config
  (setq-default visual-fill-column-width 100)
  (setq-default visual-fill-column-center-text t)
  (miao-leader-define-keys
   '("l L" . visual-fill-column-mode)))
#+end_src


** which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

** helpful
#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :config
  (setq helpful-switch-buffer-function 'switch-to-buffer)
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h SPC") #'helpful-at-point)
  (global-set-key (kbd "C-h C") #'helpful-command)
  (global-set-key (kbd "C-h p") #'describe-package))
#+end_src


** symbol-overlay
#+begin_src emacs-lisp
(use-package symbol-overlay
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'symbol-overlay-mode)
  (set-face-background 'symbol-overlay-default-face nil)
  (set-face-attribute 'symbol-overlay-default-face nil :underline t :inherit 'region))
#+end_src

** highlight-indent
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :hook
  (prog-mode . (lambda () (highlight-indent-guides-mode -1) (highlight-indent-guides-mode t)))
  :config
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-suppress-auto-error 't
        highlight-indent-guides-responsive 'top
        highlight-indent-guides-auto-top-odd-face-perc 60
        highlight-indent-guides-auto-top-even-face-perc 60
        highlight-indent-guides-auto-top-character-face-perc 60))
#+end_src

** hl-todo
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :config
  (setq hl-todo-keyword-faces
        '(("TODO"   . "#43cd80") ;;  2e8b57 00ee00 32cd32
          ("PROG"   . "#44CCCC")
          ("FIXME"  . "#FF4444")
          ("REVIEW" . "#A020F0")
          ("HOLD"   . "#FFD700")
          ("NOTE"   . "#1E90FF")
          ("FAIL"   . "#EE6666")
          ("DONE"   . "#808080"))) ;;
  (add-hook 'org-mode-hook #'hl-todo-mode)
  (add-hook 'rainbow-mode-hook (hl-line-mode (if rainbow-mode -1 1)))
  (global-hl-todo-mode t))
#+end_src

** goggles

#+begin_src emacs-lisp
(use-package goggles
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'goggles-mode)
  (add-hook 'text-mode-hook #'goggles-mode)
  (setq-default goggles-pulse nil))
#+end_src

* navigate

** dogears
#+begin_src emacs-lisp
(setq mark-ring-max 256
      global-mark-ring-max 256
      set-mark-command-repeat-pop t)

(use-package dogears
  :ensure t
  ;; These bindings are optional, of course:
  :config
  (dogears-mode t)
  (miao-define-keys 'leader
    '("s m" . dogears-go)
    '("s D" . dogears-list)
    '("s d" . consult-dogears))
  (miao-define-keys 'normal
    '("M-o" . dogears-back)
    '("M-i" . dogears-forward)))
#+end_src

** windmove
#+begin_src emacs-lisp
(use-package windmove
  :config
  (miao-define-keys '(normal insert)
    '("C-M-<down>" . windmove-down)
    '("C-M-<up>". windmove-up)
    '("C-M-<left>" . windmove-left)
    '("C-M-<right>" . windmove-right)
    '("C-S-h" . windmove-left)
    '("C-S-l" . windmove-right)
    '("C-S-j" . windmove-down)
    '("C-S-k" . windmove-up)))
#+end_src

** window
#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :config
  (miao-leader-define-keys
      '("w s" . window-swap-states)
      '("w t" . transpose-frame)
      '("w =" . balance-windows)))
#+end_src

** winum
#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :config
  (global-set-key (kbd "M-0") 'winum-select-window-0)
  (global-set-key (kbd "M-1") 'winum-select-window-1)
  (global-set-key (kbd "M-2") 'winum-select-window-2)
  (global-set-key (kbd "M-3") 'winum-select-window-3)
  (global-set-key (kbd "M-4") 'winum-select-window-4)
  (global-set-key (kbd "M-5") 'winum-select-window-5)
  (global-set-key (kbd "M-6") 'winum-select-window-6)
  (global-set-key (kbd "M-7") 'winum-select-window-7)
  (global-set-key (kbd "M-8") 'winum-select-window-8)
  (global-set-key (kbd "M-9") 'winum-select-window-9)
  (setq winum-auto-assign-0-to-minibuffer t)
  (setq winum-scope 'frame-local)
  (winum-mode t))
#+end_src


* edit
** emacs native
#+begin_src emacs-lisp
(delete-selection-mode t)
(setq delete-selection-save-to-register 'kill)
#+end_src

** editorconfig
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode t))
#+end_src

** electric
*** electric-par
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'electric-pair-local-mode)
(add-hook 'prog-mode-hook #'electric-quote-local-mode)
#+end_src

** multi-cursor
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :config
  (miao-leader-define-keys
   '("m c l" . mc/edit-lines)
   '("m c a" . mc/mark-all-dwim)
   '("m c r" . mc/mark-all-in-region-regexp)))
#+end_src
** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (add-to-list 'yas-snippet-dirs (concat (file-truename user-emacs-directory) "yasnippets"))
  (yas-load-directory (concat (file-truename user-emacs-directory) "/yasnippets"))
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (add-hook 'latex-mode-hook #'yas-minor-mode)
  (add-hook 'org-mode-hook #'yas-minor-mode))

(use-package yasnippet-snippets
  :after yasnippet
  :ensure t)
#+end_src


** parinfer-rust
#+begin_src emacs-lisp
(use-package parinfer-rust-mode
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook (lambda () (electric-pair-local-mode -1) (parinfer-rust-mode)))
  (setq parinfer-rust-check-before-enable nil))
#+end_src


** objed
#+begin_src emacs-lisp :tangle no
(use-package objed)
#+end_src

** vundo
#+begin_src emacs-lisp
(use-package vundo
  :ensure t)
#+end_src

** undo-fu
#+begin_src emacs-lisp
(use-package undo-fu
  :ensure t)
(use-package undo-fu-session
  :ensure t
  :config
  (undo-fu-session-global-mode))
#+end_src


* code
** format
#+begin_src emacs-lisp
(use-package format-all
  :ensure t
  :config

  (defun format-all-set-c-formatter ()
    (let ((format-all-directory (file-name-directory (buffer-file-name))))
      (setq retry 10)
      (while (and (> retry 0)
                  (not (file-exists-p (concat format-all-directory ".clang-format"))))
        (setq retry (- retry 1))
        (setq format-all-directory (concat format-all-directory "../")))
      (setq-local format-all-formatters `(("C" (clang-format ,(concat "-style=file:" (concat format-all-directory ".clang-format"))))))))

  (add-hook 'c-mode-hook #'format-all-set-c-formatter)
  (add-hook 'java-mode-hook #'format-all-set-c-formatter)
  (miao-leader-define-keys
   '("c f" . format-all-buffer)))
#+end_src
** compile
#+begin_src emacs-lisp
(defun colorize-compilation-buffer ()
 (read-only-mode)
 (ansi-color-apply-on-region compilation-filter-start (point))
 (read-only-mode))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
** checking
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t)
#+end_src

** lsp

#+begin_src emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-completion-provider :none) ;; we use Corfu!

  ;; :init
  ;; (defun orderless-dispatch-flex-first (_pattern index _total)
  ;;   (and (eq index 0) 'orderless-flex))

  :config
  ;; ;; Optionally configure the first word as flex filtered.
  ;; (add-hook 'orderless-style-dispatchers #'orderless-dispatch-flex-first nil 'local)

  ;; Optionally configure the cape-capf-buster.
  ;; (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))
  (setq lsp-enable-file-watchers nil)
  (setq lsp-enable-on-type-formatting nil)

  (defun lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))

  (add-hook 'lsp-completion-mode-hook #'lsp-mode-setup-completion)
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)

  (miao-leader-define-keys
   '("c l S" . lsp)
   '("c l s" . consult-lsp-symbols)
   '("c l d" . lsp-find-definition)
   '("c l r" . lsp-find-references)
   '("c l F" . lsp-format-buffer)
   '("c l h" . lsp-ui-doc-toggle)
   '("c l R" . lsp-rename)
   '("c l q" . lsp-workspace-shutdown)
   '("c l Q" . lsp-workspace-restart)
   '("c l a" . lsp-execute-code-action)
   '("c l o" . lsp-organize-imports)
   '("c l i" . lsp-find-implementation)))
#+end_src

*** lsp-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :ensure t
  :config
  (miao-leader-define-keys
   '("c l E" . lsp-treemacs-errors-list)))
#+end_src


*** consult-lsp
#+begin_src emacs-lisp
(use-package consult-lsp
  :ensure t
  :config
  (miao-leader-define-keys
   '("c l e" . consult-lsp-diagnostics)))
#+end_src

*** lsp-pyright
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))  ; or lsp-deferred
#+end_src

*** lsp-java
#+begin_src emacs-lisp
(use-package lsp-java
  :ensure t
  :config
  (add-hook 'java-mode-hook #'lsp)
  (add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
  (setq lsp-java-format-on-type-enabled nil)
  (setq lsp-java-format-comments-enabled nil)
  (setq lsp-java-java-path "/usr/lib/jvm/java-21-openjdk/bin/java")
  (setq lsp-java-configuration-runtimes '[(:name "JavaSE-1.8"
                                           :path "/usr/lib/jvm/java-8-openjdk/"
                                           :default t)
                                          (:name "JavaSE-11"
                                              :path "/usr/lib/jvm/java-11-openjdk")])
  (setq lsp-java-vmargs '("-XX:+UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90" "-Dsun.zip.disableMemoryMapping=true" "-Xmx4G" "-Xms100m")))
#+end_src

*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :config
  (setq lsp-ui-doc-show-with-mouse nil
        lsp-ui-sideline-update-mode 'point
        lsp-ui-doc-include-signature t
        lsp-ui-sideline-show-hover nil
        lsp-ui-sideline-show-symbol nil
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-doc-show-with-cursor nil
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-delay 0
        lsp-ui-sideline-delay 0.5
        lsp-ui-doc-position 'at-point))
#+end_src

*** grammarly
#+begin_src emacs-lisp
(use-package lsp-grammarly
  :ensure t)
#+end_src

* language

** cc
#+begin_src emacs-lisp
(use-package cc-mode
 :ensure nil
 :config
 (add-hook 'c-mode-hook 'lsp)
 (add-hook 'c++-mode-hook 'lsp))
#+end_src

** proof-general
#+begin_src emacs-lisp
(use-package proof-general
  :ensure t)
#+end_src

** JavaScript/Typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :ensure t
  :config
  ;; (add-to-list 'major-mode-remap-alist '(typescript-mode . typescript-ts-mode))
  ;; (setq typescript-ts-mode-indent-offset 4)
  (setq typescript-indent-level 4))
#+end_src


** agda
#+begin_src emacs-lisp
(use-package agda2
  :ensure nil
  :load-path (lambda () (file-name-directory (shell-command-to-string "agda-mode locate")))
  :config
  ;; (load-file (let ((coding-system-for-read 'utf-8))
  ;;              (shell-command-to-string "agda-mode locate")))
  (defun agda-setup-cape ()
    (with-eval-after-load 'cape
      (require 'cape-char)
      (cape-char--define agda "Agda" ?\\)

      ;; ("equal" "≡"
      ;;  "ra" "→"
      ;;  "monus" "∸"
      ;;  "\<>" "≡⟨⟩")
      (puthash "\\=<>" "≡⟨⟩" cape--agda-hash)
      ;; (defun cape--agda-decode-map ()
      ;;   (let ((hash (make-hash-table :test #'equal))
      ;;         (decode-map (agda-input-get-translations "Agda")))
      ;;     (pcase-dolist (`(,name . ,val) (cdr decode-map))
      ;;       (when (memq (aref name 0) '(?\\))
      ;;         (puthash
      ;;          name
      ;;          (if (vectorp val) (aref val 0) val) hash)))
      ;;     hash))

      ;; (defvar cape--agda-hash (cape--agda-decode-map))

      (deactivate-input-method)
      (setq completion-at-point-functions '(cape-agda cape-dabbrev))))

  (setq auto-mode-alist
        (append
         '(("\\.agda\\'" . agda2-mode)
           ("\\.lagda.md\\'" . agda2-mode))
         auto-mode-alist))
  (add-hook 'agda2-mode-hook #'agda-setup-cape)

  (setq agda2-program-args '("-i.")))
#+end_src

** sml
#+begin_src emacs-lisp
(use-package sml-mode
  :ensure t)
#+end_src

** latex

#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :config
  (add-hook 'LaTeX-mode-hook #'flyspell-mode)
  (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook #'reftex-mode)
  (setq LaTeX-command "latex -shell-escape")
  (setq TeX-auto-save t)
  (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
#+end_src

#+begin_src emacs-lisp
(use-package magic-latex-buffer
  :ensure t
  :config
  (add-hook 'latex-mode-hook 'magic-latex-buffer))
#+end_src

* completion
** vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  ;; Show more candidates
  (setq vertico-count 20)

  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  (vertico-multiform-mode)
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))
#+end_src

** orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))
        orderless-component-separator #'orderless-escapable-split-on-space))
#+end_src

** corfu

#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  ;; Optional customizations
  :config
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  (setq corfu-auto t
        corfu-scroll-margin 5
        corfu-auto-prefix 1
        corfu-quit-no-match t
        corfu-separator ?\s
        corfu-auto-delay 0.3)

 ;; (defun corfu-enable-in-minibuffer ()
 ;;   "Enable Corfu in the minibuffer."
 ;;   (when (local-variable-p 'completion-at-point-functions)
 ;;     ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
 ;;     (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
 ;;                 corfu-popupinfo-delay nil)
 ;;     (corfu-mode 1)))
 ;; (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

 (defun corfu-enable-always-in-minibuffer ()
  "Enable Corfu in the minibuffer if Vertico/Mct are not active."
  (unless (or (bound-and-true-p mct--active)
              (bound-and-true-p vertico--input)
              (eq (current-local-map) read-passwd-map))
    ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))
 (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

 (bind-keys :map corfu-map
            ("RET" . nil)
            ("M-SPC" . nil)
            ("SPC" . corfu-insert-separator))

 (define-key corfu-map (kbd "RET") nil)
  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
 (global-corfu-mode)
 (corfu-popupinfo-mode))

(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-blend-background t)
  (kind-icon-default-face 'corfu-default)
  :config
  (setq kind-icon-default-style
        '(:padding -1 :stroke 0 :margin 0 :radius 0 :height 0.4 :scale 1))
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** cape

#+begin_src emacs-lisp
(use-package cape
  :ensure t
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  ;; :bind (("C-c p p" . completion-at-point) ;; capf
  ;;        ("C-c p t" . complete-tag)        ;; etags
  ;;        ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ("C-c p k" . cape-keyword)
  ;;        ("C-c p s" . cape-elisp-symbol)
  ;;        ("C-c p e" . cape-elisp-block)
  ;;        ("C-c p a" . cape-abbrev)
  ;;        ("C-c p l" . cape-line)
  ;;        ("C-c p w" . cape-dict)
  ;;        ("C-c p :" . cape-emoji)
  ;;        ("C-c p \\" . cape-tex)
  ;;        ("C-c p _" . cape-tex)
  ;;        ("C-c p ^" . cape-tex)
  ;;        ("C-c p &" . cape-sgml)
  ;;        ("C-c p r" . cape-rfc1345))
  :config
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol))
  ;;(add-to-list 'completion-at-point-functions #'cape-line)

#+end_src

** consult
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  (advice-add #'register-preview :override #'consult-register-window)

  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config
  (add-hook 'completion-list-mode #'consult-preview-at-point-mode)
  (setq consult-preview-key 'any
        consult-narrow-key "<")

  (defvar consult--source-dogears
    `(
      :name     "Dogears"
      :narrow   ?d
      :category 'dogears
      :items    (lambda ()
                  (mapcar
                   (lambda (place)
                     (propertize (dogears--format-record place)
                                 'consult--candidate place))
                   dogears-list))
      :action   ,#'consult--dogears-jump
      :state    ,#'consult--dogears-state))

  (defun consult--dogears-state ()
    (consult--state-with-return
     (consult--dogears-preview)
     #'consult--dogears-jump)

    (defun consult--dogears-preview ()
      (lambda (action cand)
        (when cand
          (consult-dogear-jump cand)))))

  (defun consult--dogears-jump (cand)
    (when cand
        (let* ((dogear (get-text-property 0 'consult--candidate cand))
               (buffer (get-buffer (cdr (assoc 'buffer dogear))))
               (pos (cdr (assoc 'position dogear))))
          (switch-to-buffer buffer)
          (goto-char pos))))

  (defun consult-dogears ()
    (interactive)
    (consult--multi '(consult--source-dogears)))


  (consult-customize
   consult-theme consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-xref
   consult-mark consult-global-mark consult-dogears
   consult--source-bookmark
   :preview-key '(:debounce 0.1 any)
   consult-recent-file consult--source-recent-file
   consult--source-file-register consult--source-project-recent-file
   :preview-key "M-.")

  (global-set-key (kbd "M-g M-g") #'consult-goto-line)
  (global-set-key (kbd "M-y") #'consult-yank-pop)

  (defun consult-ripgrep-at-point ()
    (interactive)
    (miao-mark-symbol)
    (let ((symbol (buffer-substring-no-properties (region-beginning) (region-end))))
      (consult-ripgrep nil symbol)))

  (defun consult-line-at-point ()
    (interactive)
    (miao-mark-symbol)
    (let ((symbol (buffer-substring-no-properties (region-beginning) (region-end))))
      (consult-line symbol)))

  (miao-define-keys 'leader
    '("s s" . consult-line)
    '("s S" . consult-line-at-point)
    '("s i" . consult-imenu)
    '("f r" . consult-recent-file)
    '("s r" . consult-ripgrep)
    '("s R" . consult-ripgrep-at-point)
    '("u SPC" . consult-mark)
    '("p b" . consult-project-buffer)
    '("s SPC" . consult-global-mark)))
#+end_src

** marginalia
- Enable rich annotations using the Marginalia package

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  ;; :bind (:map minibuffer-local-map
  ;;        ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :config

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
* org
#+begin_src emacs-lisp
(use-package org
  :bind
  (:map org-mode-map
        ("C-M-<return>" . org-insert-subheading))
  :init
  (setq org-directory "~/Project/org/")
  (setq org-agenda-files '("~/Project/org/todo.org"))
  (setq org-default-notes-file (concat org-directory "notes.org"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (org . t)
     (shell . t)
     (C . t)
     (latex . t)
     (python . t)
     (js . t)
     (dot . t)
     (awk . t)))

  (if (display-graphic-p)
      (setq org-startup-indented t))

  (setq org-icalendar-include-todo 'unblocked
        org-icalendar-use-scheduled '(event-if-todo))

  (setq org-special-ctrl-a/e t
        org-adapt-indentation t
        org-edit-src-content-indentation 0
        org-cycle-separator-lines 1
        org-return-follows-link t
        org-src-window-setup 'current-window
        org-confirm-babel-evaluate nil
        org-insert-heading-respect-content t
        org-pretty-entities t
        org-log-done t
        org-imenu-depth 4
        org-indent-indentation-per-level 4
        org-list-allow-alphabetical t
        org-goto-interface 'outline-path-completionp
        org-image-actual-width nil
        org-display-remote-inline-images 'download
        org-use-sub-superscripts nil
        org-outline-path-complete-in-steps nil)

  (set-face-attribute 'org-ellipsis nil :bold nil)

  (add-to-list 'org-export-backends 'md)
  ;; NOTE: snippet error in org-mode
  (setq org-src-tab-acts-natively nil)

  (setq org-todo-keywords '((sequence "TODO(t)" "PROG(p)" "FIXME(f)" "REVIEW(r)" "HOLD(h)" "NOTE(n)" "|" "FAIL(F)" "DONE(d)")))
  (setq org-list-demote-modify-bullet
        '(("+"  . "-")
          ("-"  . "-")
          ("*"  . "-")
          ("1." . "A.")
          ("A." . "a.")
          ("1)" . "A)")
          ("A)" . "a)")
          ("1)" . "-")
          ("a)" . "-")))
  (setq org-ellipsis " ר")

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Project/org/todo.org" "Capture")
           "* TODO %?\n  %i\n  %a")
          ("j" "Journal" entry (file+datetree "~/Project/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))

  (setq org-refile-use-outline-path t)
  (setq org-reverse-note-order t)
  (setq org-refile-targets '((nil :maxlevel . 5)
                             (org-agenda-files :maxlevel . 5)))

  :config
  ;; TODO replace imenu with org-goto
  (define-key org-mode-map (kbd "C-c s i") #'org-goto)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))

  (with-eval-after-load 'visual-fill-column
    (add-hook 'org-mode-hook #'visual-fill-column-mode))
  (add-hook 'org-mode-hook #'flyspell-mode)
  (miao-leader-define-major-keys 'org-mode
    '("s y" . org-copy-subtree)
    '("s w" . org-cut-subtree)
    '("s i" . org-goto)
    '("s A" . org-archive-subtree)
    '("t i" . org-toggle-inline-images)
    '("t l" . org-latex-preview))
  (miao-leader-define-keys
      '("n c" . org-capture)
      '("n L" . org-store-link)))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(defun open-org-todo-files()
  (interactive)
  ;; (persp-switch "org")
  (find-file org-directory)
  (project-find-file))

(defun open-org-todo-file()
  (interactive)
  ;; (persp-switch "org")
  (find-file (concat org-directory "todo.org"))
  (delete-other-windows))


(set-face-attribute 'org-agenda-current-time nil :bold t :foreground "#EEEEEE")
(setq org-agenda-tags-column 0
      org-agenda-block-separator ?─
      org-agenda-time-grid
      '((daily today require-timed)
        (800 1000 1200 1400 1600 1800 2000)
        " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
      org-agenda-current-time-string
      "  now ─────────────────────────────────────────────────")


(miao-define-keys 'leader
 '("n a" . org-agenda)
 '("n t" . open-org-todo-file)
 '("n f" . open-org-todo-files)
 )


(use-package org-super-agenda
  :ensure t
  ;; TODO: set up org-super-agenda-groups
  )
#+end_src

** org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :config
  (setq org-auto-align-tags nil
        ;; org-tags-column 0
        org-catch-invisible-edits 'show-and-error
        ;; Org styling, hide markup etc.
        org-modern-block-name t
        org-modern-star '("◉")
        org-modern-list '((?+ . "▸")
                          (?- . "–")
                          (?* . "▸")))

  (global-org-modern-mode))
#+end_src


** org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :ensure t
  :init
  (setq org-noter-notes-search-path (list (concat org-directory "literature/note"))
        org-noter-default-notes-file-names '())
  (setq org-noter-always-create-frame nil
        org-noter-notes-window-location 'other-frame)
  (setq org-noter-max-short-selected-text-length most-positive-fixnum)
  (setq org-noter-doc-split-fraction '(0.6 . 0.4))
  :config
  (miao-leader-define-keys
   '("n o" . org-noter)))
#+end_src

* magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :init
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  :config
  (setq vc-dir-backend 'git)
  (setq magit-display-buffer-function 'magit-display-buffer-fullcolumn-most-v1))
#+end_src

** diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  ;; :custom-face
  ;; (diff-hl-change ((t (:inherit custom-changed :foreground unspecified :background unspecified))))
  ;; (diff-hl-insert ((t (:inherit diff-added :background unspecified))))
  ;; (diff-hl-delete ((t (:inherit diff-removed :background unspecified))))
  ;; :bind (:map diff-hl-command-map
  ;;        ("SPC" . diff-hl-mark-hunk))
  :hook ((after-init . global-diff-hl-mode)
         (dired-mode . diff-hl-dired-mode))
  :init (setq diff-hl-draw-borders nil)
  :config
  ;; Highlight on-the-fly
  (diff-hl-flydiff-mode t)

  ;; Set fringe style
  (setq-default fringes-outside-margins t)

  (unless (display-graphic-p)
    ;; Fall back to the display margin since the fringe is unavailable in tty
    (diff-hl-margin-mode t)
    ;; Avoid restoring `diff-hl-margin-mode'
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-minor-mode-table
                   '(diff-hl-margin-mode nil))))

  ;; Integration with magit
  (with-eval-after-load 'magit
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)))
#+end_src
* shell

#+begin_src emacs-lisp
(setq sh-shell "/bin/zsh")
#+end_src

** exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src
** vterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :config
  (setq vterm-shell "/bin/zsh")

  (setq vterm-buffer-name-string "vterm %s")
  (setq vterm-max-scrollback 65536)
  (miao-leader-define-keys
   '("o t" . vterm)))
#+end_src

* project

#+begin_src emacs-lisp
(use-package project
  :init
  (setq project-vc-merge-submodules nil)
  :config
  (defun project-open-magit ()
    (interactive)
    (magit (project-root (project-current t))))

  (defun project-open-magit-todos ()
    (interactive)
    (magit-todos-list (project-root (project-current t))))

  (setq project-switch-commands '((persp-show-persps "" "<SPC>")
                                  (persp-show-persps "" "<RET>")
                                  (project-find-file "File file" ?f)
                                  (project-find-dir "Find directory" ?d)
                                  (project-open-magit "Magit" ?g)
                                  (project-open-magit-todos "Todos" ?t)))

  (setq vc-dir-backend 'git
        vc-handled-backends '(Git))

  (defgroup project-local nil
    "Local, non-VC-backed project.el root directories."
    :group 'project)

  (defcustom project-local-identifier ".projectile"
    "Specify a single filename or a list of names."
    :type '(choice (string :tag "Single file")
                   (repeat (string :tag "Filename")))
    :group 'project-local)

  (cl-defmethod project-root ((project (head local)))
    "Return root directory of current PROJECT."
    (cdr project))

  (defun project-local-try-local (dir)
    "Determine if DIR is a non-VC project.
DIR must include a file with the name determined by the
variable `project-local-identifier' to be considered a project."
    (if-let ((root (if (listp project-local-identifier)
                       (seq-some (lambda (n)
                                   (locate-dominating-file dir n))
                                 project-local-identifier)
                     (locate-dominating-file dir project-local-identifier))))
        (cons 'local root)))

  (customize-set-variable 'project-find-functions
                          (list #'project-local-try-local
                                #'project-try-vc))

  (miao-leader-define-keys
   '("p p" . project-switch-project)
   '("p f" . project-find-file)
   '("p b" . project-switch-to-buffer)
   '("p B" . project-list-buffers)
   '("p c" . project-compile)
   '("p d" . project-find-dir)
   '("p k" . project-kill-buffers)
   '("p D" . project-forget-project)
   '("p %" . project-query-replace-regexp)))
#+end_src


* pdf
** pdf-tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
  (set-face-attribute 'pdf-view-region nil :inherit 'highlight))
#+end_src
** org-noter-pdftools
#+begin_src emacs-lisp :tangle no
(use-package org-pdftools
  :ensure nil
  :vc (:url "git@github.com:ST-Saint/org-pdftools.git" :branch "master")
  :hook (org-mode . org-pdftools-setup-link))

(use-package org-noter-pdftools
  :ensure nil
  :vc (:url "git@github.com:ST-Saint/org-pdftools.git" :branch "master")
  :config
  (bind-keys :map org-noter-notes-mode-map
             ("C-." . org-noter-pdftools-activate-org-note)
             ("M-." . org-noter-pdftools-embed-org-note-to-pdf))
  (bind-keys :map pdf-view-mode-map
             ("C-c m i i" . org-noter-pdftools-insert-precise-note-underline)
             ("C-c m i u" . org-noter-pdftools-insert-precise-note-underline)
             ("C-c m i h" . org-noter-pdftools-insert-precise-note-highlight)
             ("C-c m i H" . (lambda () (interactive) (org-noter-pdftools-insert-precise-note-highlight t)))
             ("C-c m i s" . org-noter-pdftools-insert-precise-note-squiggly)
             ("C-a" . pdf-view-align-left)
             ("C-e" . pdf-view-align-right)
             ("M-i" . org-noter-pdftools-insert-precise-note-underline)
             ("C-l" . pdf-view-center-in-window))

  (setq org-noter-pdftools-insert-content-heading nil)

  (with-eval-after-load 'pdf-annot (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

* remote

** ssh-deploy
#+begin_src emacs-lisp
(use-package async
  :ensure t)

(use-package ssh-deploy
  :ensure t
  :hook ((after-save . ssh-deploy-after-save)
         (find-file . ssh-deploy-find-file))
  :config
  (ssh-deploy-line-mode) ;; If you want mode-line feature
  (ssh-deploy-add-menu)) ;; If you want menu-bar feature
#+end_src

** gpg
#+begin_src emacs-lisp
(use-package pinentry
  :ensure t
  :init
  (setq epg-pinentry-mode 'loopback)
  (pinentry-start))
#+end_src

** tramp
#+begin_src emacs-lisp
(use-package tramp
  :ensure nil
  :config
  (setq tramp-allow-unsafe-temporary-files t))
#+end_src

** restclient
#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :config
  (setq auto-mode-alist
        (append
         '(("\\.http\\'" . restclient-mode))
         auto-mode-alist)))
#+end_src

* email
** mu4e
#+begin_src emacs-lisp
(use-package pinentry
  :ensure t
  :init
  (setq epg-pinentry-mode 'loopback)
  (pinentry-start))

(use-package mu4e
  :ensure nil
  :load-path (lambda ()
               (cond
                ((string-equal system-type "windows-nt") ; windows
                 "")
                ((string-equal system-type "darwin") ; macOS
                 "/opt/homebrew/Cellar/mu/1.10.7/share/emacs/site-lisp/mu/mu4e/")
                ((string-equal system-type "gnu/linux") ; linux
                 "/usr/local/share/emacs/site-lisp/mu4e/")))
  :after pinentry
  :config
  (require 'mu4e-contrib)
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-confirm-quit nil)
  (setq mu4e-hide-index-messages t)
  (setq message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")
  (defun mu4e~read-mail-content (content-type)
    (interactive)
    (let ((mail-path (mu4e-message-readable-path)))
      (with-temp-buffer
        (insert-file-contents mail-path)
        (let ((file-contents (buffer-string)))
          (pcase content-type
            ("html"
             (let ((boundary (progn (string-match "boundary=\"\?\\(.+?\\)\"\?$" file-contents)
                                    (match-string 1 file-contents))))
               (if boundary
                   (let ((start (progn (search-forward "content-type: text/html")
                                       (search-forward "

")))

                         (end (- (search-forward (concat "--" boundary)) (+ (length boundary) 3))))

                     (substring file-contents start end)))))


            ("text"
             (message "text")))))))

  (defun mu4e~write-body-to-html (msg)
    "Write MSG's body (either html or text) to a temporary file;
return the filename."
    (let* ((html (mu4e~read-mail-content "html"))
           (text (mu4e~read-mail-content "text"))
           (tmpfile (mu4e-make-temp-file "html")))

      (unless (or html text)
        (mu4e-error "No body part for this message"))
      (with-temp-buffer
        (insert "<head><meta charset=\"UTF-8\"></head>\n")
        (insert (concat "<p><strong>From</strong>: "
                        (mu4e~action-header-to-html msg :from) "</br>"))
        (insert (concat "<strong>To</strong>: "
                        (mu4e~action-header-to-html msg :to) "</br>"))
        (insert (concat "<strong>Date</strong>: "
                        (format-time-string mu4e-view-date-format (mu4e-message-field msg :date)) "</br>"))
        (insert (concat "<strong>Subject</strong>: " (mu4e-message-field msg :subject) "</p>"))
        (insert (or html (concat "<pre>" text "</pre>")))
        (write-file tmpfile)
        (save-buffer)
        tmpfile)))

  (defun mu4e~action-header-to-html (msg field)
    "Convert the FIELD of MSG to an HTML string."
    (mapconcat
     (lambda(c)
       (let* ((name (when (car c)
                      (replace-regexp-in-string "[[:cntrl:]]" "" (car c))))
              (email (when (cdr c)
                       (replace-regexp-in-string "[[:cntrl:]]" "" (cdr c))))
              (addr (if mu4e-view-show-addresses
                        (if name (format "%s <%s>" name email) email)
                      (or name email))) ;; name may be nil
              ;; Escape HTML entities
              (addr (replace-regexp-in-string "&" "&amp;" addr))
              (addr (replace-regexp-in-string "<" "&lt;" addr))
              (addr (replace-regexp-in-string ">" "&gt;" addr)))
         addr))
     (mu4e-message-field msg field) ", "))

  (defun mu4e-action-save-to-pdf (msg)
    (let* ((date (mu4e-message-field msg :date))
           (infile (mu4e~write-body-to-html msg))
           (outfile (format-time-string "%Y-%m-%d%H%M%S.pdf" date)))
      (with-temp-buffer
        (shell-command
         (format "wkhtmltopdf %s /tmp/%s" infile outfile) t))))

  (add-to-list 'mu4e-view-actions '("pdf" . mu4e-action-save-to-pdf) t)

  (setq mail-user-agent 'mu4e-user-agent
        read-mail-command 'mu4e)

  (setq mu4e-update-interval 60
        mu4e-index-update-error-continue 't
        mu4e-index-update-error-warning 't
        mu4e-index-update-in-background 't
        mu4e-html2text-command 'mu4e-shr2text)

  (setq mu4e-headers-include-related nil
        mu4e-headers-fields '(
                              (:human-date   . 12)
                              (:flags        . 10)
                              (:mailing-list . 15)
                              (:from-or-to   . 25)
                              (:subject      . nil)))

  (setq mu4e-headers-thread-root-prefix          '(""   . "")
        mu4e-headers-thread-first-child-prefix   '("│  " . "│  ")
        mu4e-headers-thread-child-prefix         '("│  " . "│  ")
        mu4e-headers-thread-last-child-prefix    '("└  " . "└  ")
        mu4e-headers-thread-connection-prefix    '("│  " . "│  ")
        mu4e-headers-thread-blank-prefix         '(""   . "")
        mu4e-headers-thread-orphan-prefix        '(""   . "")
        mu4e-headers-thread-single-orphan-prefix '("│  " . "│  ")
        mu4e-headers-thread-duplicate-prefix     '("="  . "="))

  (add-hook 'mu4e-context-changed-hook #'mu4e)

  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-contexts
        (list
         (make-mu4e-context
          :name "gmail"
          :match-func (lambda (msg)
                        (when msg
                          (string-match-p "/gmail" (mu4e-message-field msg :maildir))))

          :vars '((user-mail-address . "st.saint.wyy@gmail.com")
                  (user-full-name . "Yayu Wang")
                  (smtpmail-smtp-user "st.saint.wyy@gmail.com")
                  (smtpmail-smtp-server "smtp.gmail.com")
                  (mu4e-sent-folder       . "/gmail/sent")
                  (mu4e-drafts-folder     . "/gmail/drafts")
                  (mu4e-trash-folder      . "/gmail/trash")
                  (mu4e-refile-folder     . "/gmail/all")
                  (mu4e-bookmarks . (
                                     (:name "Important" :query "maildir:/gmail/Important" :key ?i)
                                     (:name "Unread messages" :query "maildir:/gmail/All flag:unread AND NOT flag:trashed" :key ?u)
                                     (:name "Today's messages" :query "maildir:/gmail/All date:today..now" :key ?t)
                                     (:name "Last 7 days" :query "maildir:/gmail/All date:7d..now" :key ?w)
                                     (:name "Last month" :query "maildir:/gmail/All date:4w..now" :key ?m)
                                     (:name "Messages with attachments" :query "maildir:/gmail/All flag:attach" :key ?a)
                                     (:name "Flagged messages" :query "maildir:/gmail/All flag:flagged" :key ?f)))
                  (mu4e-maildir-shortcuts . ( (:maildir "/gmail/INBOX" :key ?b)
                                              (:maildir "/gmail/sent"  :key ?s)
                                              (:maildir "/gmail/drafts"      :key ?d)
                                              (:maildir "/gmail/trash"      :key ?t)
                                              (:maildir "/gmail/all"   :key ?a)))))


         (make-mu4e-context
          :name "ubc"
          :match-func (lambda (msg)
                        (when msg
                          (string-match-p "/UBC" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "yayuwang@cs.ubc.ca")
                  (user-full-name . "Yayu Wang")
                  (smtpmail-smtp-user "yayuwang@cs.ubc.ca")
                  (smtpmail-smtp-server "mail.cs.ubc.ca")
                  (mu4e-sent-folder       . "/UBC/Sent")
                  (mu4e-drafts-folder     . "/UBC/Draft")
                  (mu4e-trash-folder      . "/UBC/Trash")
                  (mu4e-refile-folder     . "/UBC/All")
                  (mu4e-bookmarks . (
                                     (:name "Unread messages" :query "maildir:/UBC/Inbox flag:unread AND NOT flag:trashed" :key ?u)
                                     (:name "Today's messages" :query "maildir:/UBC/Inbox date:today..now" :key ?t)
                                     (:name "Last 7 days" :query "maildir:/UBC/Inbox date:7d..now" :key ?w)
                                     (:name "Last month" :query "maildir:/UBC/Inbox date:4w..now" :key ?m)
                                     (:name "Messages with attachments" :query "maildir:/UBC/Inbox flag:attach" :key ?a)
                                     (:name "Flagged messages" :query "maildir:/UBC/Inbox flag:flagged" :key ?f)))
                  (mu4e-maildir-shortcuts . ((:maildir "/UBC/Inbox" :key ?i)
                                             (:maildir "/UBC/Sent" :key ?s)
                                             (:maildir "/UBC/Draft" :key ?d)
                                             (:maildir "/UBC/Trash" :key ?t)))))))


  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
        smtpmail-debug-info 't
        smtpmail-stream-type 'ssl
        smtpmail-smtp-service 465
        mail-specify-envelope-from 't
        mail-envelope-from 'header
        message-sendmail-envelope-from 'header
        message-sendmail-f-is-evil 't
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail)

  (set-face-attribute 'mu4e-thread-fold-face nil :inherit 'unspecified)

  (miao-leader-define-keys
    '("o m" . mu4e)))
#+end_src

** org-msg
#+begin_src emacs-lisp
(use-package org-msg
  :ensure nil
  :vc (:url "git@github.com:danielfleischer/org-msg.git" :branch "1.12")
  :after mu4e
  :config
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt "\nHi%s,\n\n"
        org-msg-recipient-names '(("yayuwang@cs.ubc.ca" . "Yayu Wang"))
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '((new                 . (text html))
                                       (reply-to-html           . (text html))
                                       (reply-to-text           . (text)))
        org-msg-convert-citation t)

  (setq org-msg-enforce-css '((p nil
                                 ((font-size . "12pt")
                                  (line-height . "1.5em")))
                              (li nil
                                  ((font-size . "12pt")
                                   (line-height . "1.5em")))))
  (setq org-msg-signature "#+begin_signature\nBest,\n\n-- *Yayu*\n#+end_signature")
  (org-msg-mode))
#+end_src

* rime
#+begin_src emacs-lisp
(use-package rime
  :ensure t
  :custom
  (default-input-method "rime")
  (rime-user-data-dir "~/.config/ibus/rime")
  (rime-show-candidate 'posframe)
  :config

  (defun toggle-rime-im ()
    (interactive)
    (if (not (equal current-input-method "rime"))
        (set-input-method 'rime)
      (set-input-method nil)))

  (global-set-key (kbd "C-S-SPC") 'toggle-rime-im)

  (defun rime-miao-off ()
    (unless miao-insert-mode
     (deactivate-input-method)))

  (add-hook 'rime-mode-hook
            (lambda () (if (not rime-mode)
                           (remove-hook 'miao-insert-mode-hook #'rime-miao-off)
                         (add-hook 'miao-insert-mode-hook #'rime-miao-off)
                         (miao-insert-mode)))))
#+end_src
