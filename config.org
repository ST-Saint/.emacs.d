#+TITLE: emacs config
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :results none

* patch
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
(setq custom-file (concat (file-name-as-directory user-emacs-directory) "custom.el"))

(setq mac-command-modifier 'meta)

;; Automatically tangle our Emacs.org config file when we save it
(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name) (concat (file-truename user-emacs-directory) "config.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src


* package

+ [ ] after load with-eval-after-load
+ [ ] quelpa force git fetcher

** use-package
#+begin_src emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; (let ((packages (directory-files "/home/meow/.emacs.d/packages" nil directory-files-no-dot-files-regexp)))
;;   (dolist (package packages)
;;     (add-to-list 'load-path (concat "/home/meow/.emacs.d/packages/" package))))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** quelpa
#+begin_src emacs-lisp
(use-package quelpa
  :config
  (setq quelpa-upgrade-p nil
        quelpa-self-upgrade-p nil
        quelpa-update-melpa-p nil))

(use-package quelpa-use-package)
#+end_src


* basic
#+begin_src emacs-lisp
(use-package benchmark-init
  :config
  (add-hook 'after-init-hook 'benchmark-init/deactivate))

(setq confirm-kill-emacs 'y-or-n-p)
(setq byte-compile-warnings nil
      native-comp-async-report-warnings-errors nil)
(setq auth-sources '("~/.authinfo.gpg"))
(setq ring-bell-function 'ignore)
(setq c-default-style nil)
#+end_src

* handy

** customize
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)

(save-place-mode 't)

(global-hl-line-mode 't)

(column-number-mode t)

(setq compilation-scroll-output t)

(add-hook 'before-save-hook #'whitespace-cleanup)

(setq-default truncate-lines 't)

(setq use-dialog-box nil)

(recentf-mode t)
(setq recentf-max-saved-items nil)

(setq-default indent-tabs-mode nil)
(setq electric-indent-mode t)

(or (server-mode)
    (server-start))

(define-key minibuffer-mode-map (kbd "C-M-<backspace>") #'backward-kill-sexp)

(use-package helpful
  :config
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)
  (global-set-key (kbd "C-h C") #'helpful-command)
  (global-set-key (kbd "C-h p") #'describe-package))

(defun open-config-file ()
  (interactive)
  (find-file "~/.emacs.d/config.org")
  (delete-other-windows))

(defun copy-file-name ()
  (interactive)
  (let ((path nil))
    (if (eq major-mode 'dired-mode)
        (setq path (dired-current-directory))
      (setq path (buffer-file-name)))
    (message path)
    (kill-new path)
    path))

(defun delete-current-file ()
  (interactive)
  (delete-file (copy-file-name)))

(defun open-current-file-as-root ()
  (interactive)
  (find-file (concat "/sudo::" (copy-file-name))))

(use-package restart-emacs
  :after meow
  :config
  (meow-leader-define-key
   '("q q" . save-buffers-kill-emacs)
   '("q r" . restart-emacs)
   '("r r" . restart-emacs)))

(defun date-time()
  (interactive)
  (insert (format-time-string "%a %b %d %H:%M:%S %Z %Y")))

(use-package which-function-mode
  :ensure nil
  :hook
  (prog-mode . which-function-mode))

(use-package scratch)
#+end_src

** scroll
#+begin_src emacs-lisp
(setq scroll-conservatively 101
      scroll-step 1
      scroll-margin 3
      hscroll-margin 2
      hscroll-step 1
      scroll-preserve-screen-position t
      auto-window-vscroll nil
      mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
      mouse-wheel-scroll-amount-horizontal 2)
#+end_src

** jump
#+begin_src emacs-lisp
(add-hook 'xref-after-jump-hook (lambda () (progn (set-mark-command nil) (deactivate-mark))))
#+end_src

** drag
#+begin_src emacs-lisp
(use-package drag-stuff
  :after meow
  :config
  (meow-normal-define-key
   '("M-p" . drag-stuff-up)
   '("M-n" . drag-stuff-down))
  (drag-stuff-global-mode t))
#+end_src

** link
#+begin_src emacs-lisp
(use-package link-hint
  :after meow
  :config
  (meow-leader-define-key
   '("o l" . link-hint-open-link)))
#+end_src

** multi-edit
#+begin_src emacs-lisp
(use-package multiple-cursors
  :after meow
  :config
  (meow-leader-define-key
   '("m c l" . mc/edit-lines)
   '("m c a" . mc/mark-all-dwim)
   '("m c r" . mc/mark-all-in-region-regexp)))
#+end_src

** input method
*** rime
#+begin_src emacs-lisp
(use-package rime
  :custom
  (default-input-method "rime")
  (rime-user-data-dir "~/.config/ibus/rime")
  (rime-show-candidate 'posframe))
#+end_src


** clip
#+begin_src emacs-lisp
(use-package clipetty
  :hook (after-init . global-clipetty-mode)
  :bind ("M-w" . clipetty-kill-ring-save))
#+end_src

** ansi
#+begin_src emacs-lisp
(use-package ansi-color
  :config
  (defun colorize-compilation-buffer ()
    (read-only-mode)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (read-only-mode))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))
#+end_src

* meow
+ beacon doesn't work

#+begin_src emacs-lisp
(use-package meow
  :init
  (defun meow-setup-qwerty ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (setq meow-space-keymap (make-keymap))
    (dolist (keybind '(("b r" revert-buffer)
                       ("f p" open-config-file)
                       ("f f" find-file)
                       ("f y" copy-file-name)
                       ("f R" rename-visited-file)
                       ("f D" delete-current-file)
                       ("f U" open-current-file-as-root)
                       ("l l" visual-line-mode)
                       ("`" meow-last-buffer)))
      (let ((key (car keybind))
            (func (cadr keybind)))
        (define-key meow-space-keymap key func)
        (meow-leader-define-key (cons key func))))

    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))

    (meow-define-keys 'insert
      '("M-SPC" . meow-keypad))

    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet)
     '("<escape>" . meow-normal-mode))

    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-kill)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-search)
     '("S" . meow-visit)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     ;; '("v" . meow-visit)
     '("V" . meow-line)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-delete)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("M-o" . meow-pop-marker)
     '("M-<SPC>" . meow-keypad)
     '("<escape>" . ignore)))

  :config
  (setq meow-replace-state-name-list '((normal . "ಎ·ω·ಎ")
                                       (motion . "ಎ-ω-ಎ")
                                       (keypad . "/ᐠ.ˬ.ᐟ\\")
                                       (insert . "/ᐠ.ꞈ.ᐟ\\")
                                       (beacon . "/ᐠ..ᐟ\\")))

  (setq meow-keypad-start-keys nil
        meow-keypad-literal-prefix nil
        meow-keypad-meta-prefix nil
        meow-keypad-ctrl-meta-prefix nil)
  (setq meow-use-clipboard t)

  (meow-setup-qwerty)

  (set-face-attribute 'meow-normal-indicator nil :weight 'bold)
  (set-face-attribute 'meow-motion-indicator nil :weight 'bold)
  (set-face-attribute 'meow-keypad-indicator nil :weight 'bold)
  (set-face-attribute 'meow-insert-indicator nil :weight 'bold)
  (set-face-attribute 'meow-beacon-indicator nil :weight 'bold)

  (with-eval-after-load 'doom-themes
    (set-face-attribute 'meow-beacon-fake-selection nil :background "SlateGray4")
    (set-face-attribute 'meow-beacon-fake-cursor nil :background "#51afef"))

  (meow-global-mode t))
#+end_src

* ui

** emacs basic
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

(blink-cursor-mode -1)
(scroll-bar-mode -1)        ; disable visible scrollbar
(tool-bar-mode -1)          ; disable the toolbar
(tooltip-mode -1)           ; disable tooltips
(menu-bar-mode -1)            ; disable the menu bar

(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)

(add-hook 'org-mode-hook #'visual-line-mode)
(add-hook 'prog-mode-hook #'visual-line-mode)

;; disable line numbers for some modes
(dolist (mode '(term-mode-hook
                vterm-mode-hook
                treemacs-mode-hook
                dashboard-mook-hook
                so-long-mode-hook
                pdf-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode -1))))
#+end_src

** theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    ;; (doom-themes-org-config)
    (eval-after-load 'hl-line
      (set-face-attribute 'hl-line nil :inherit nil :background "gray8"))
    (set-face-attribute 'region nil :background "#4F5766"))
#+end_src

** color
#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src


** font
#+begin_src emacs-lisp
(set-frame-font "SauceCodePro Nerd Font Mono 18" nil t)

(defun set-font-size (font-size)
  (interactive "nFont-size: ")
  (set-face-attribute 'default nil :height (* font-size 10)))

(set-font-size 18)
;; ;; FIXME
;; (set-face-attribute 'default nil :font "SauceCodePro Nerd Font" :height 160)

;; ;; Set the fixed pitch face
;; (set-face-attribute 'fixed-pitch nil :font "SauceCodePro Nerd Font" :height 160)

;; ;; Set the variable pitch face
;; (set-face-attribute 'variable-pitch nil :font "DejaVuSansMono Nerd Font Mono" :height 160)
#+end_src

** visual

*** visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :init
    (setq-default visual-fill-column-width 100)
    (setq-default visual-fill-column-center-text t)
    :config
    (meow-leader-define-key
     '("l L" . visual-fill-column-mode)))
#+end_src

** icon
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :config
  (setq dashboard-startup-banner "~/org/emacs-dragon.svg"
        dashboard-image-banner-max-height 600)
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq dashboard-week-agenda t)
  (setq dashboard-projects-backend 'project-el)
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 10)
                          (registers . 5)))
  (defun dashboard ()
    (interactive)
    (switch-to-buffer dashboard-buffer-name)
    (delete-other-windows))
  (dashboard-setup-startup-hook))
#+end_src

** FIXME doom-modeline

- first installation causes ~bar is not defined~ error

#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (setq doom-modeline-project-detection 'project)
    (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
    (doom-modeline-mode 't))
#+end_src

** highlight
+ highlight TODO in code

*** hl-todo
#+begin_src emacs-lisp
(use-package hl-todo
  :config
  (setq hl-todo-keyword-faces
        '(("TODO"   . "#43cd80") ;;  2e8b57 00ee00 32cd32
          ("PROG"   . "#44CCCC")
          ("FIXME"  . "#FF4444")
          ("REVIEW" . "#A020F0")
          ("HOLD"   . "#FFD700")
          ("NOTE"   . "#1E90FF")
          ("FAIL"   . "#EE6666")
          ("DONE"   . "#808080"))) ;;
  (add-hook 'org-mode-hook #'hl-todo-mode)
  (global-hl-todo-mode t))
#+end_src

*** beacon

#+begin_src emacs-lisp
(use-package beacon
  :config
  (meow-leader-define-key
   '("SPC" . beacon-blink))
  (add-to-list 'beacon-dont-blink-commands #'consult-line)
  (add-to-list 'beacon-dont-blink-major-modes #'pdf-view-mdoe)
  (setq beacon-blink-when-window-scrolls nil)
  (beacon-mode nil))
#+end_src
**** TODO better flush

*** googles
#+begin_src emacs-lisp
(use-package goggles
  :hook ((prog-mode text-mode) . goggles-mode)
  :config
  (setq-default goggles-pulse t))
#+end_src


*** rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

*** highlight-indent
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook
  (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-suppress-auto-error 't
        highlight-indent-guides-responsive 'top
        highlight-indent-guides-auto-top-odd-face-perc 60
        highlight-indent-guides-auto-top-even-face-perc 60
        highlight-indent-guides-auto-top-character-face-perc 60))
#+end_src

** which key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))
#+end_src

** keycast
#+begin_src emacs-lisp
(use-package keycast
  :config
  (defun toggle-keycast()
    (interactive)
    (if (member '("" keycast-mode-line " ") global-mode-string)
        (progn (setq global-mode-string (delete '("" keycast-mode-line " ") global-mode-string))
               (remove-hook 'pre-command-hook 'keycast--update))
      (add-to-list 'global-mode-string '("" keycast-mode-line " "))
      (add-hook 'pre-command-hook 'keycast--update t)))
  )
#+end_src

* magit

#+begin_src emacs-lisp
(use-package magit
  :defer t
  :init
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  :config
  (setq vc-dir-backend 'git)
  (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
  (meow-leader-define-key
   '("g g" . magit)))
#+end_src

** magit-todos
#+begin_src emacs-lisp
(use-package magit-todos
  :config
  (setq magit-todos-section-map nil)
  ;; (setq magit-todos-item-section-map nil)
  ;; (setq magit-todos-list-map nil)
  (keymap-unset magit-todos-item-section-map "j T" t)
  (keymap-unset magit-todos-item-section-map "j l" t)
  (keymap-unset magit-todos-item-section-map "j" t)
  (keymap-unset magit-todos-item-section-map "j" t)
  (setq magit-todos-filename-filter '("node_modules"))
  ;; (magit-todos-mode t)
  (meow-leader-define-key
   '("p t" . magit-todos-list)))
#+end_src

** diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  ;; :custom-face
  ;; (diff-hl-change ((t (:inherit custom-changed :foreground unspecified :background unspecified))))
  ;; (diff-hl-insert ((t (:inherit diff-added :background unspecified))))
  ;; (diff-hl-delete ((t (:inherit diff-removed :background unspecified))))
  ;; :bind (:map diff-hl-command-map
  ;;        ("SPC" . diff-hl-mark-hunk))
  :hook ((after-init . global-diff-hl-mode)
         (dired-mode . diff-hl-dired-mode))
  :init (setq diff-hl-draw-borders nil)
  :config
  ;; Highlight on-the-fly
  (diff-hl-flydiff-mode t)

  ;; Set fringe style
  (setq-default fringes-outside-margins t)

  (unless (display-graphic-p)
    ;; Fall back to the display margin since the fringe is unavailable in tty
    (diff-hl-margin-mode t)
    ;; Avoid restoring `diff-hl-margin-mode'
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-minor-mode-table
                   '(diff-hl-margin-mode nil))))

  ;; Integration with magit
  (with-eval-after-load 'magit
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)))
#+end_src


* project
#+begin_src emacs-lisp
  (use-package ripgrep)

  (use-package project
    :init
    (setq project-vc-merge-submodules nil)
    :config
    (defun project-open-magit ()
      (interactive)
      (magit (project-root (project-current t))))

    (defun project-open-magit-todos ()
      (interactive)
      (magit-todos-list (project-root (project-current t))))

    (setq project-switch-commands '((persp-show-persps "" ? )
                                    (persp-show-persps "" ?)
                                    (project-find-file "File file" ?f)
                                    (project-open-magit "Magit" ?g)
                                    (project-open-magit-todos "Todos" ?t)))

    (setq vc-dir-backend 'git
          vc-handled-backends '(Git))


    (defgroup project-local nil
      "Local, non-VC-backed project.el root directories."
      :group 'project)

    (defcustom project-local-identifier ".project"
      "Specify a single filename or a list of names."
      :type '(choice (string :tag "Single file")
                     (repeat (string :tag "Filename")))
      :group 'project-local)

    (cl-defmethod project-root ((project (head local)))
      "Return root directory of current PROJECT."
      (cdr project))

    (defun project-local-try-local (dir)
      "Determine if DIR is a non-VC project.
  DIR must include a file with the name determined by the
  variable `project-local-identifier' to be considered a project."
      (if-let ((root (if (listp project-local-identifier)
                         (seq-some (lambda (n)
                                     (locate-dominating-file dir n))
                                   project-local-identifier)
                       (locate-dominating-file dir project-local-identifier))))
          (cons 'local root)))

    (customize-set-variable 'project-find-functions
                            (list #'project-try-vc
                                  #'project-local-try-local))

    (meow-leader-define-key
     '("p p" . project-switch-project)
     '("p f" . project-find-file)
     '("p b" . project-switch-to-buffer)
     '("p B" . project-list-buffers)
     '("p c" . project-compile)
     '("p d" . project-find-dir)
     '("p D" . project-dired)))
#+end_src

* navigate
** isearch
#+begin_src emacs-lisp
(use-package isearch
  :ensure nil
  :bind (:map isearch-mode-map
              ([remap isearch-delete-char] . isearch-del-char))
  :custom
  (isearch-lazy-count t)
  (lazy-count-prefix-format "%s/%s "))
#+end_src

** perspective

+ [ ] create customized sort function

#+begin_src emacs-lisp
  (use-package persp-mode
    ;; :custom
    ;; (persp-mode-prefix-key nil)
    ;; (persp-sort 'created)
    ;; (persp-modestring-short t)
    :config
    (setq persp-previous-persp-name nil)
    (setq persp-nil-name "main")
    (defun persp-show-persps ()
      (interactive)
      (message (concat persp-last-persp-name
                       " ----- "
                       "[ "
                       (s-join " | " persp-names-cache)
                       " ]")))

    (defun project-switch-project (dir)
      "\"Switch\" to another project by running an Emacs command.
    The available commands are presented as a dispatch menu
    made from `project-switch-commands'.

    When called in a program, it will use the project corresponding
    to directory DIR."
      (interactive (list (project-prompt-project-dir)))
      (let ((command (if (symbolp project-switch-commands)
                         project-switch-commands
                       (project--switch-project-command))))
        (let ((project-current-directory-override dir))
          (let ((project-root (project-root (project-current))))
            (when project-root
              (persp-switch (file-name-nondirectory (directory-file-name project-root)))))
          (call-interactively command))))
    (setq persp-autokill-buffer-on-remove 'kill-weak)

  (defun open-config-persp ()
      (interactive)
      (persp-switch ".emacs.d"))

    (defun open-config-file ()
      (interactive)
      (persp-switch ".emacs.d")
      (find-file "~/.emacs.d/config.org")
      (delete-other-windows))

    (defun persp-save-previous-persp-name (name frame)
      (unless (equal name persp-last-persp-name)
        (setq persp-previous-persp-name persp-last-persp-name)))

    (add-hook 'persp-before-switch-functions #'persp-save-previous-persp-name)

    (defun persp-switch-last ()
      (interactive)
      (persp-switch persp-previous-persp-name))

    (defun persp-move-left ()
      (interactive)
      (let ((pos (cl-position persp-last-persp-name persp-names-cache)))
        (unless (< pos 1)
          (cl-rotatef (nth (1- pos) persp-names-cache) (nth pos persp-names-cache))))
      (persp-show-persps))

    (defun persp-move-right ()
      (interactive)
      (let ((pos (cl-position persp-last-persp-name persp-names-cache)))
        (unless (= pos (length persp-names-cache))
          (cl-rotatef (nth (1+ pos) persp-names-cache) (nth pos persp-names-cache))))
      (persp-show-persps))

    (meow-leader-define-key
     ;; '("1" . (lambda() (interactive) (persp-switch (nth 0 persp-names-cache)) (persp-show-persps)))
     ;; '("2" . (lambda() (interactive) (persp-switch (nth 1 persp-names-cache)) (persp-show-persps)))
     ;; '("3" . (lambda() (interactive) (persp-switch (nth 2 persp-names-cache)) (persp-show-persps)))
     ;; '("4" . (lambda() (interactive) (persp-switch (nth 3 persp-names-cache)) (persp-show-persps)))
     ;; '("5" . (lambda() (interactive) (persp-switch (nth 4 persp-names-cache)) (persp-show-persps)))
     ;; '("6" . (lambda() (interactive) (persp-switch (nth 5 persp-names-cache)) (persp-show-persps)))
     ;; '("7" . (lambda() (interactive) (persp-switch (nth 6 persp-names-cache)) (persp-show-persps)))
     ;; '("8" . (lambda() (interactive) (persp-switch (nth 7 persp-names-cache)) (persp-show-persps)))
     ;; '("9" . (lambda() (interactive) (persp-switch (nth 8 persp-names-cache)) (persp-show-persps)))
     '("f p" . open-config-file)
     '("f P" . open-config-persp)
     '("w s" . persp-switch)
     '("w w" . persp-show-persps)
     ;; '("w b" . persp-scratch-buffer)
     '("TAB s" . persp-switch)
     '("TAB p" . persp-switch)
     '("TAB n" . persp-switch)
     '("TAB SPC" . persp-switch)
     '("p s" . persp-switch)
     '("TAB `" . persp-switch-last)
     '("TAB j" . persp-move-left)
     '("TAB k" . persp-move-right)
     '("TAB h" . persp-prev)
     '("TAB l" . persp-next)
     '("TAB TAB" . persp-show-persps)
     '("TAB b" . persp-switch-to-buffer)
     '("," . persp-switch-to-buffer)
     '("TAB d" . persp-kill)
     '("TAB D" . (lambda () (interactive) (persp-kill (persp-last-persp-name)))))
    (persp-mode t))
#+end_src

** centaur-tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :config
  (centaur-tabs-mode 't)
  (setq centaur-tabs-adjust-buffer-order 't)
  (setq centaur-tabs-set-bar 'under)
  (setq x-underline-at-descent-line 't)
  (setq centaur-tabs-set-icons 't)
  (setq centaur-tabs-height 60
        centaur-tabs-bar-height 60)
  (defun centaur-tabs-adjust-buffer-order ()
    (interactive)
    "Put the two buffers switched to the adjacent position after current buffer changed."
    ;; Don't trigger by centaur-tabs command, it's annoying.
    ;; This feature should be trigger by search plugins, such as ibuffer, helm or ivy.
    (unless (or (not centaur-tabs-mode)
                (string-prefix-p "centaur-tabs" (format "%s" this-command))
                (string-prefix-p "mouse-drag-header-line" (format "%s" this-command))
                (string-prefix-p "mouse-drag-tab-line" (format "%s" this-command))
                ;; (string-prefix-p "(lambda (event) (interactive e)" (format "%s" this-command))
                )
      (when (and centaur-tabs-adjust-buffer-order
                 ;; (not (eq (current-buffer) centaur-tabs-last-focused-buffer))
                 (not (minibufferp)))
        ;; Just continue when the buffer has changed.
        (let* ((current (current-buffer))
               (current-group (cl-first (funcall centaur-tabs-buffer-groups-function))))
          ;; Record the last focused buffer.
          (setq centaur-tabs-last-focused-buffer current)

          ;; Just continue if two buffers are in the same group.
          (when (string= current-group centaur-tabs-last-focused-buffer-group)
            (let* ((bufset (centaur-tabs-get-tabset current-group))
                   (current-group-tabs (centaur-tabs-tabs bufset))
                   (current-group-buffers (cl-mapcar 'car current-group-tabs))
                   (current-buffer-index (cl-position current current-group-buffers)))

              (unless (or (not current-buffer-index)
                          (eq current-buffer-index 0))
                (let* ((copy-group-tabs (cl-copy-list current-group-tabs))
                       (current-tab (nth current-buffer-index copy-group-tabs))
                       (first-tab (nth 0 copy-group-tabs))
                       (base-group-tabs (centaur-tabs-remove-nth-element current-buffer-index copy-group-tabs))
                       new-group-tabs)
                  (setq new-group-tabs (centaur-tabs-insert-before base-group-tabs first-tab current-tab))
                  (set bufset new-group-tabs)
                  (centaur-tabs-set-template bufset nil)
                  (centaur-tabs-display-update)))
              ;; If the tabs are not adjacent, swap their positions.
              ))

          ;; Update the group name of the last accessed tab.
          (setq centaur-tabs-last-focused-buffer-group current-group)))))
  ;; (centaur-tabs-group-by-projectile-project)
  (centaur-tabs-enable-buffer-reordering)

  (setq centaur-tabs-cycle-scope 'tabs)
  (meow-normal-define-key
   '("C-<tab>" . centaur-tabs-forward)
   '("C-S-<iso-lefttab>" . centaur-tabs-backward))
  (meow-define-keys 'insert
    '("C-<tab>" . centaur-tabs-forward)
    '("C-S-<iso-lefttab>" . centaur-tabs-backward)))
#+end_src

** winnum
#+begin_src emacs-lisp
(use-package winum
  :config
  (meow-leader-define-key
   ;; '("M-0" . treemacs-mode)
   '("1" . winum-select-window-1)
   '("2" . winum-select-window-2)
   '("3" . winum-select-window-3)
   '("4" . winum-select-window-4)
   '("5" . winum-select-window-5)
   '("6" . winum-select-window-6)
   '("7" . winum-select-window-7)
   '("8" . winum-select-window-8)
   '("9" . winum-select-window-9)
   '("0" . winum-select-window-0))
  (setq winum-auto-assign-0-to-minibuffer t)
  (setq winum-scope 'frame-local)
  (winum-mode 't))
#+end_src

** ace-window
#+begin_src emacs-lisp
(use-package ace-window
  :config
  (setq aw-scope 'frame)
  (global-set-key (kbd "C-x o") 'ace-window))
#+end_src

** better-jumper
#+begin_src emacs-lisp
;; (use-package better-jumper
;;   :config
;;   (meow-normal-define-key
;;    '("M-i" . better-jumper-jump-forward)
;;    '("M-o" . better-jumper-jump-backward))
;;   (better-jumper-mode))
#+end_src

* completion

+ [ ] missing a consult selection indicator

** emacs-completion
#+begin_src emacs-lisp
;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; disable cursor blink
  (setq cursor-blink-mode nil)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  ;; (setq tab-always-indent 'complete)
  )
#+end_src

** consult

#+begin_src emacs-lisp
(use-package consult
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  ;; (setq register-preview-delay 0.5
  ;;       register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.

  :config

  (add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode)
  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   consult-ripgrep consult-git-grep consult-grep consult-xref
   :preview-key '(:debounce 0.1 any)
   consult-bookmark consult-recent-file
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key '("M-."
                  :debounce 1.0 "<up>" "<down>"))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well. >
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))

  (defun consult-ripgrep-at-point ()
    (interactive)
    (meow-mark-symbol 0)
    (let ((symbol (buffer-substring-no-properties (region-beginning) (region-end))))
      (consult-ripgrep nil symbol)))

  (defun consult-line-at-point ()
    (interactive)
    (meow-mark-symbol 0)
    (let ((symbol (buffer-substring-no-properties (region-beginning) (region-end))))
      (consult-line symbol)))

  (global-set-key (kbd "M-g M-g") #'consult-goto-line)
  (meow-leader-define-key
   '("s s" . consult-line)
   '("s S" . consult-line-at-point)
   '("s i" . consult-imenu)
   '("f r" . consult-recent-file)
   '("s r" . consult-ripgrep)
   '("s R" . consult-ripgrep-at-point)
   '("s <SPC>" . consult-mark)
   '("s C-<SPC>" . consult-global-mark))
  )
#+end_src

** vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  ;; Show more candidates
  (setq vertico-count 20)

  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  (vertico-multiform-mode)
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))
#+end_src

** orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))
        orderless-component-separator #'orderless-escapable-split-on-space))
#+end_src


** embark
#+begin_src emacs-lisp

(use-package embark
  :bind
  (
   ;; ("C-." . embark-act)         ;; pick some comfortable binding
   ;; ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package marginalia
  :config
  ;; (setq marginalia-command-categories
  ;;       (append '((projectile-find-file . project-file)
  ;;                 (projectile-find-dir . project-file)
  ;;                 (projectile-switch-to-buffer . buffer)
  ;;                 (projectile-switch-project . file))
  ;;               marginalia-command-categories))
  (marginalia-mode t))

(use-package wgrep)


;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** corfu

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                    ;; Enable auto completion
    ;; (corfu-separator ?`)           ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect-first t)         ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    (corfu-auto-delay 0.5)
    (corfu-scroll-margin 5)        ;; Use scroll margin

    :bind
    (:map corfu-map
          ("M-SPC" . corfu-insert-separator)
          ("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous))

    :init
    (global-corfu-mode)
    :config
    (corfu-popupinfo-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'corfu-mode))
#+end_src

** cape
#+begin_src emacs-lisp
  (use-package cape
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.

    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-tex)
    (add-to-list 'completion-at-point-functions #'cape-sgml)
    (add-to-list 'completion-at-point-functions #'cape-rfc1345)
    (add-to-list 'completion-at-point-functions #'cape-abbrev)
    (add-to-list 'completion-at-point-functions #'cape-dict)
    (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)

    ;; Cape provides the adapter `cape-company-to-capf' for Company backends.
    ;; (setq-local completion-at-point-functions
    ;;             (mapcar #'cape-company-to-capf
    ;;                     (list #'company-files #'company-ispell #'company-dabbrev)))
    :config
    (setq-default cape-symbol-wrapper nil))

  (use-package kind-icon
    :after corfu
    :custom
    ;; to compute blended backgrounds correctly
    (kind-icon-default-face 'corfu-default)
    :config
    (setq kind-icon-default-style
          '(:padding -1 :stroke 0 :margin 0 :radius 0 :height 0.5 :scale 1))
    (setq kind-icon-use-icons t)
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
  ;; :config
  ;; (add-hook 'my-completion-ui-mode-hook
  ;;           (lambda ()
  ;;             (setq completion-in-region-function
  ;;                   (kind-icon-enhance-completion
  ;;                    completion-in-region-function)))))
#+end_src

***  corful-terminal
#+begin_src emacs-lisp
  (quelpa '(popon
            :fetcher git
            :url "https://codeberg.org/akib/emacs-popon.git"))

  (quelpa '(corfu-terminal
            :fetcher git
            :url "https://codeberg.org/akib/emacs-corfu-terminal.git"))

  (use-package popon)
  (use-package corfu-terminal
    :after popon)
#+end_src


** template

#+begin_src emacs-lisp :tangle no
(use-package tempel
  ;; Require trigger prefix before template name when completing.
  :custom
  (tempel-trigger-prefix "<")

  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert)
         ("M-p" . tempel-previous)
         ("M-n" . tempel-next))

  :init
  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  (global-tempel-abbrev-mode))
#+end_src

** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (add-to-list 'yas-snippet-dirs "~/org/yasnippets")
  (yas-load-directory "~/org/yasnippets")
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (add-hook 'latex-mode-hook #'yas-minor-mode)
  (add-hook 'org-mode-hook #'yas-minor-mode))

(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

* org
#+begin_src emacs-lisp
  (use-package org
    :defer t
    :bind
    (:map org-mode-map
          ("C-M-<return>" . org-insert-subheading))
    :init
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (org . t)
       (shell . t)
       (C . t)
       (latex . t)
       (python . t)
       (js . t)
       (dot . t)
       (awk . t)
       ))
    (if (display-graphic-p)
        (setq org-startup-indented t))

    (setq org-icalendar-include-todo 'unblocked
          org-icalendar-use-scheduled '(event-if-todo))

    (setq org-special-ctrl-a/e t
          org-adapt-indentation t
          org-edit-src-content-indentation 2
          org-cycle-separator-lines 1
          org-return-follows-link t
          org-src-window-setup 'current-window
          org-confirm-babel-evaluate nil
          org-insert-heading-respect-content t
          org-pretty-entities t
          org-log-done t
          org-imenu-depth 4
          org-indent-indentation-per-level 4
          org-list-allow-alphabetical t
          org-goto-interface 'outline-path-completionp
          org-image-actual-width nil
          org-display-remote-inline-images 'download
          org-use-sub-superscripts nil
          org-outline-path-complete-in-steps nil)

    (set-face-attribute 'org-ellipsis nil :bold nil)

    (add-to-list 'org-export-backends 'md)
    ;; NOTE: snippet error in org-mode
    (setq org-src-tab-acts-natively nil)

    (setq org-todo-keywords '((sequence "TODO(t)" "PROG(p)" "FIXME(f)" "REVIEW(r)" "HOLD(h)" "NOTE(n)" "|" "FAIL(F)" "DONE(d)" )))
    (setq org-list-demote-modify-bullet
          '(("+"  . "-")
            ("-"  . "-")
            ("*"  . "-")
            ("1." . "A.")
            ("A." . "a.")
            ("1)" . "A)")
            ("A)" . "a)")
            ("1)" . "-")
            ("a)" . "-")))
    (setq org-ellipsis " ר")

    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/todo.org" "Capture")
             "* TODO %?\n  %i\n  %a")
            ("j" "Journal" entry (file+datetree "~/org/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")))

    (setq org-refile-use-outline-path t)
    (setq org-reverse-note-order t)
    (setq org-refile-targets '((nil :maxlevel . 5)
                               (org-agenda-files :maxlevel . 5)))

    (setq org-directory "~/org/")
    (setq org-agenda-files '("~/org/todo.org"))
    (setq org-default-notes-file (concat org-directory "notes.org"))

    :config
    ;; TODO replace imenu with org-goto
    (define-key org-mode-map (kbd "C-c s i") #'org-goto)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))

    (add-hook 'org-mode-hook #'visual-fill-column-mode)
    (add-hook 'org-mode-hook #'flyspell-mode)
    (meow-leader-define-key
     '("n c" . org-capture)
     '("n L" . org-store-link)))
#+end_src

** org-modern
#+begin_src emacs-lisp
;; (use-package org-superstar
;;   :config
;;   (setq org-superstar-special-todo-items t)
;;   (setq org-superstar-headline-bullets-list '(?◉))
;;   (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

(use-package org-modern
  :config
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   ;; Org styling, hide markup etc.
   org-modern-block-name t
   org-modern-star '("◉")
   org-modern-list '((?+ . "▸")
                     (?- . "–")
                     (?* . "▸")))

  (global-org-modern-mode))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(defun open-org-todo-files()
  (interactive)
  (persp-switch "org")
  (find-file org-directory)
  (project-find-file))

(defun open-org-todo-file()
  (interactive)
  (persp-switch "org")
  (find-file (concat org-directory "todo.org"))
  (delete-other-windows))


(set-face-attribute 'org-agenda-current-time nil :bold t :foreground "#EEEEEE")
(setq org-agenda-tags-column 0
      org-agenda-block-separator ?─
      org-agenda-time-grid
      '((daily today require-timed)
        (800 1000 1200 1400 1600 1800 2000)
        " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
      org-agenda-current-time-string
      "  now ─────────────────────────────────────────────────")


(meow-leader-define-key
 '("n a" . org-agenda)
 '("n t" . open-org-todo-file)
 '("n f" . open-org-todo-files)
 )


(use-package org-super-agenda
  ;; TODO: set up org-super-agenda-groups
  )
#+end_src


** org-reveal
#+begin_src emacs-lisp
(use-package ox-reveal
;; TODO add template
)
#+end_src

** ox-spectable
#+begin_src emacs-lisp
(use-package ox-spectacle)
#+end_src

** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :config
  (setq org-roam-directory "~/org/")
  (setq org-roam-completion-everywhere nil)
  (org-roam-db-autosync-mode))
#+end_src

** org-pomodoro
#+begin_src emacs-lisp
(use-package org-pomodoro
  :config
  (setq org-pomodoro-manual-break 't
        org-pomodoro-audio-player "paplay"
        org-pomodoro-start-sound-p 't
        org-pomodoro-ticking-sound-p 't
        org-pomodoro-overtime-sound-p 't
        org-pomodoro-bell-sound "~/org/ping-bing.wav"
        org-pomodoro-ticking-sound "~/org/rain.wav"
        org-pomodoro-ticking-frequency 15
        org-pomodoro-ticking-sound-states '(:pomodoro :overtime)
        org-pomodoro-start-sound org-pomodoro-bell-sound
        org-pomodoro-finished-sound org-pomodoro-bell-sound
        org-pomodoro-overtime-sound org-pomodoro-bell-sound
        org-pomodoro-long-break-sound org-pomodoro-bell-sound
        org-pomodoro-short-break-sound org-pomodoro-bell-sound
        org-pomodoro-overtime-sound org-pomodoro-bell-sound
        org-pomodoro-overtime-sound-args nil
        org-pomodoro-start-sound-args nil
        org-pomodoro-ticking-sound-args nil
        org-pomodoro-finished-sound-args nil
        org-pomodoro-long-break-sound-args nil
        org-pomodoro-short-break-sound-args nil)
  (meow-leader-define-key
   '("n p" . org-pomodoro)))
#+end_src

** org-alert
#+begin_src emacs-lisp
  (use-package org-alert
    :config
    (org-alert-enable)
    (setq alert-default-style 'libnotify)
    (setq org-alert-interval 300
          org-alert-notify-cutoff 10
          org-alert-notify-after-event-cutoff 10))
#+end_src

** org-wild-notifier
#+begin_src emacs-lisp
  (use-package org-wild-notifier
    :config
    (setq org-wild-notifier-alert-time '(30 10 5 0)
          org-wild-notifier-notification-title "Org-Notify"
          org-wild-notifier-notification-icon "/home/yayu/org/emacs-dragon.svg")
    (org-wild-notifier-mode)
    )
#+end_src


* calendar
#+begin_src emacs-lisp
(use-package calfw
  :config
  (use-package calfw-cal)
  (use-package calfw-ical)
  (use-package calfw-org)
  (set-face-attribute 'cfw:face-toolbar nil :background nil)

  ;; Unicode characters
  (setq cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓)

  ;; REVIEW use public ics
  ;; (setq diary-file (concat org-directory "diary.org"))
  (defun open-calendar ()
    (interactive)
    (persp-switch "org")
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "White")  ; orgmode source
      ;; (cfw:howm-create-source "Blue")  ; howm source
      ;; (cfw:cal-create-source "Orange") ; diary source
      (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/st.saint.wyy%40gmail.com/private-7a20bbc862b99c5b6405dc07c460ada3/basic.ics" "deep sky blue") ; google calendar ICS
      ))
      (delete-other-windows))

  (meow-leader-define-key
   '("n C" . open-calendar)))
#+end_src


* code
** format
#+begin_src emacs-lisp
  (use-package format-all
    :config

    (defun format-all-set-formatter ()
      (if (and (buffer-file-name) (file-exists-p "~/.clang-format"))
          (let ((format-all-directory (file-name-directory (buffer-file-name))))
            (while (not (file-exists-p (concat format-all-directory ".clang-format")))
              (setq format-all-directory (concat format-all-directory "../")))
            (setq-local format-all-formatters `(("C" (clang-format ,(concat "-style=file:" (concat format-all-directory ".clang-format")))))))))

    (add-hook 'c-mode-hook #'format-all-set-formatter)
    ;; (add-hook 'c-ts-mode-hook #'format-all-set-formatter)
    (add-hook 'java-mode-hook #'format-all-set-formatter)
    ;; (add-hook 'java-ts-mode-hook #'format-all-set-formatter)
    (meow-leader-define-key
     '("c f" . format-all-buffer)))
#+end_src

** pair

*** smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :hook
  (text-mode . smartparens-mode)
  (prog-mode . smartparens-mode))
#+end_src


** hideshow
#+begin_src emacs-lisp
(use-package hs-minor-mode
  :ensure nil
  :hook
  (prog-mode . hs-minor-mode)
  :init
  (meow-leader-define-key
   '("TAB C-t" . hs-toggle-hiding)))

(use-package origami)
#+end_src

* flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :hook
  (prog-mode . flycheck-mode)
  (org-mode . flycheck-mode))
#+end_src

** flyspell-correct
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell org
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src

** grammarly

#+begin_src emacs-lisp
  (use-package grammarly)

  (use-package flycheck-grammarly
    :after grammarly
    :config
    (setq flycheck-grammarly-check-time 2)
    (setq flycheck-grammarly nil)
    (defun flycheck-toggle-grammarly ()
      "toggle grammarly."
      (interactive)
      (if flycheck-grammarly
          (progn
            (setq flycheck-grammarly nil)
            (setq flycheck-checkers (remove 'grammarly flycheck-checkers))
            (setq grammarly-on-open-function-list (remove 'flycheck-grammarly--on-open grammarly-on-open-function-list))
            (setq grammarly-on-message-function-list (remove 'flycheck-grammarly--on-message grammarly-on-message-function-list))
            (setq grammarly-on-close-function-list (remove 'flycheck-grammarly--on-close grammarly-on-close-function-list)))
        (setq flycheck-grammarly t)
        (add-to-list 'flycheck-checkers 'grammarly)
        (add-to-list 'grammarly-on-open-function-list 'flycheck-grammarly--on-open)
        (add-to-list 'grammarly-on-message-function-list 'flycheck-grammarly--on-message)
        (add-to-list 'grammarly-on-close-function-list 'flycheck-grammarly--on-close)
        )))
#+end_src

* language

** english

** tree-sitter
#+begin_src emacs-lisp :tangle no
(use-package treesit-auto
  :config
  (add-hook 'java-ts-mode (lambda ()
                            (defvar java-ts-mode--font-lock-settings
                              (treesit-font-lock-rules
                               :language 'java
                               :override ;TODO:
                               :feature 'comment
                               `((line_comment) @font-lock-comment-face
                                 (block_comment) @font-lock-comment-face)
                               :language 'java
                               :override t
                               :feature 'constant
                               `(((identifier) @font-lock-constant-face
                                  (:match "^[A-Z_][A-Z_\\d]*$" @font-lock-constant-face))
                                 [(true) (false)] @font-lock-constant-face)
                               :language 'java
                               :override t
                               :feature 'keyword
                               `([,@java-ts-mode--keywords
                                  (this)
                                  (super)] @font-lock-keyword-face
                                  (labeled_statement
                                   (identifier) @font-lock-keyword-face))
                               :language 'java
                               :override t
                               :feature 'operator
                               `([,@java-ts-mode--operators] @font-lock-operator-face
                                 "@" @font-lock-constant-face)
                               :language 'java
                               :override t
                               :feature 'annotation
                               `((annotation
                                  name: (identifier) @font-lock-constant-face)

                                 (marker_annotation
                                  name: (identifier) @font-lock-constant-face))
                               :language 'java
                               :override t
                               :feature 'string
                               `((string_literal) @font-lock-string-face)
                               :language 'java
                               :override t
                               :feature 'literal
                               `((null_literal) @font-lock-constant-face
                                 (binary_integer_literal)  @font-lock-number-face
                                 (decimal_integer_literal) @font-lock-number-face
                                 (hex_integer_literal) @font-lock-number-face
                                 (octal_integer_literal) @font-lock-number-face
                                 (decimal_floating_point_literal) @font-lock-number-face
                                 (hex_floating_point_literal) @font-lock-number-face)
                               :language 'java
                               :override t
                               :feature 'type
                               '((annotation_type_declaration
                                  name: (identifier) @font-lock-type-face)

                                 (interface_declaration
                                  name: (identifier) @font-lock-type-face)

                                 (class_declaration
                                  name: (identifier) @font-lock-type-face)

                                 (record_declaration
                                  name: (identifier) @font-lock-type-face)

                                 (enum_declaration
                                  name: (identifier) @font-lock-type-face)

                                 (constructor_declaration
                                  name: (identifier) @font-lock-type-face)

                                 (field_access
                                  object: (identifier) @font-lock-type-face)

                                 (method_reference (identifier) @font-lock-type-face)

                                 (scoped_identifier (identifier) @font-lock-constant-face)

                                 ((scoped_identifier name: (identifier) @font-lock-type-face)
                                  (:match "^[A-Z]" @font-lock-type-face))

                                 (type_identifier) @font-lock-type-face

                                 [(boolean_type)
                                  (integral_type)
                                  (floating_point_type)
                                  (void_type)] @font-lock-type-face)
                               :language 'java
                               :override t
                               :feature 'definition
                               `((annotation_type_element_declaration
                                  name: (identifier) @font-lock-function-name-face)

                                 (method_declaration
                                  name: (identifier) @font-lock-function-name-face)

                                 (variable_declarator
                                  name: (identifier) @font-lock-variable-name-face)

                                 (element_value_pair
                                  key: (identifier) @font-lock-property-use-face)

                                 (formal_parameter
                                  name: (identifier) @font-lock-variable-name-face)

                                 (catch_formal_parameter
                                  name: (identifier) @font-lock-variable-name-face))
                               :language 'java
                               :override t
                               :feature 'expression
                               '((method_invocation
                                  object: (identifier) @font-lock-variable-use-face)

                                 (method_invocation
                                  name: (identifier) @font-lock-function-call-face)

                                 (argument_list (identifier) @font-lock-variable-name-face)

                                 (expression_statement (identifier) @font-lock-variable-use-face))

                               :language 'java
                               :feature 'bracket
                               '((["(" ")" "[" "]" "{" "}"]) @font-lock-bracket-face)

                               :language 'java
                               :feature 'delimiter
                               '((["," ":" ";"]) @font-lock-delimiter-face))
                              "Tree-sitter font-lock settings for `java-ts-mode'.")))

  (global-treesit-auto-mode))
#+end_src

** lsp

#+begin_src emacs-lisp
(quelpa '(lsp-bridge
           :fetcher github
           :repo "manateelazycat/lsp-bridge"
           :files ("*.el" "*.py"
                   ("acm" "acm/*")
                   ("core" "core/*")
                   ("langserver" "langserver/*")
                   ("multiserver" "multiserver/*")
                   ("resources" "resources/*"))))

(use-package lsp-bridge
  :hook
  (lsp-bridge-mode . (lambda () (corfu-mode -1)))
  (c-mode . lsp-bridge-mode)
  (c++-mode . lsp-bridge-mode)
  (java-mode . lsp-bridge-mode)
  (python-mode . lsp-bridge-mode)
  (typescript-mode . lsp-bridge-mode)
  (latex-mode . lsp-bridge-mode)

  :config
  (setq lsp-bridge-enable-log nil)
  (setq lsp-bridge-enable-hover-diagnostic t)
  (setq acm-markdown-render-font-height 160)
  (setq acm-backend-lsp-candidate-max-length 200)
  (setq acm-backend-lsp-candidate-min-length 0)
  (setq lsp-bridge-complete-manually nil)
  (setq lsp-bridge-user-langserver-dir "~/.emacs.d/")

  (setq lsp-bridge-complete-manually nil)
  ;; (setq lsp-bridge-python-lsp-server 'pyright)
  (setq lsp-bridge-tex-lsp-server 'texlab)

  (define-key lsp-bridge-mode-map (kbd "C-M-i") #'lsp-bridge-popup-complete-menu)

  (meow-leader-define-key
   '("c l d" . lsp-bridge-find-def)
   '("c l r" . lsp-bridge-find-references)
   '("c l R" . lsp-bridge-rename)
   '("c l I" . lsp-bridge-find-impl)
   '("c l e" . lsp-bridge-diagnostic-list)
   '("c l s" . lsp-bridge-mode)
   '("c l S" . lsp-bridge-workspace-list-symbols)
   '("c l a" . lsp-bridge-code-action)
   '("c l q" . lsp-bridge-kill-process)
   '("c l Q" . lsp-bridge-restart-process)))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package lsp-mode
  :custom
  (lsp-completion-provider :none) ;; we use Corfu!

  :init
  (defun orderless-dispatch-flex-first (_pattern index _total)
    (and (eq index 0) 'orderless-flex))

  (defun lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))

  ;; Optionally configure the first word as flex filtered.
  (add-hook 'orderless-style-dispatchers #'orderless-dispatch-flex-first nil 'local)

  ;; Optionally configure the cape-capf-buster.
  (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))
  (setq lsp-enable-file-watchers nil)
  (setq lsp-enable-on-type-formatting nil)

  (meow-leader-define-key
   '("c l S" . lsp)
   '("c l s" . consult-lsp-symbols)
   '("c l d" . lsp-find-definition)
   '("c l r" . lsp-find-references)
   '("c l F" . lsp-format-buffer)
   '("c l R" . lsp-rename)
   '("c l q" . lsp-workspace-shutdown)
   '("c l Q" . lsp-workspace-restart)
   '("c l a" . lsp-execute-code-action)
   '("c l o" . lsp-organize-imports)
   '("c l i" . lsp-find-implementation))

  :hook
  (lsp-completion-mode . lsp-mode-setup-completion))
#+end_src


** elisp(emacs-lisp)
#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook
  (emacs-lisp-mode . aggressive-indent-mode))
#+end_src

** cc
#+begin_src emacs-lisp
  (use-package cc-mode
    :config
    ;; (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
    ;; (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
    ;; (add-to-list 'major-mode-remap-alist '(c-or-c++-mode . c-or-c++-ts-mode))
    ;; (setq c-ts-mode-indent-offset 4)
    (setq lsp-clients-clangd-args
          '("-j=3"
            "--background-index"
            "--clang-tidy"
            "--completion-style=detailed"
            "--header-insertion=never"
            "--header-insertion-decorators=0")))
#+end_src

*** citre

#+begin_src emacs-lisp
(use-package citre
  :config
  (require 'citre-config)
  (defun citre-global-dbpath (&optional dir)
    "Get global database path.
This is the directory containing the GTAGS file.  When DIR is
non-nil, find database of that directory, otherwise find the
database of current directory.

When the global program is not found on the machine, return nil
as it is needed to get the database path."
    (when (citre-executable-find (or citre-global-program "global") t)
      (pcase citre--global-dbpath
        ('none nil)
        ((and val (pred stringp) (pred citre-dir-exists-p)) val)
        (_ (let ((default-directory (or default-directory dir)))
             (condition-case nil
                 (progn
                   (setq dbpath (string-trim (shell-command-to-string (concat (or citre-global-program "global") " --print-dbpath"))))
                   (setq citre--global-dbpath
                         (if (equal dbpath "global: GTAGS not found.")
                             nil
                           dbpath)))
               (error (setq citre--global-dbpath 'none)
                      nil))))))))
#+end_src

*** gtags

#+begin_src emacs-lisp
  (use-package ggtags
    :config
    (bind-key  "C-g" #'ggtags-navigation-mode-abort 'ggtags-navigation-map)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode)
                  (ggtags-mode 1)))))
#+end_src

** java

#+begin_src emacs-lisp :tangle no
(use-package lsp-java
  :config
  (add-hook 'java-mode-hook #'lsp)
  (setq lsp-java-format-on-type-enabled nil)
  (setq lsp-java-format-comments-enabled nil)
  (setq lsp-java-autobuild-enabled 't)
  (setq lsp-java-java-path "/usr/lib/jvm/java-11-openjdk/bin/java")
  (setq lsp-java-configuration-runtimes '[
                                          (:name "JavaSE-11"
                                                 :path "/usr/lib/jvm/java-11-openjdk/")
                                          (:name "JavaSE-1.8"
                                                 :path "/usr/lib/jvm/java-8-openjdk/"
                                                 :default t)
                                          ])
  (advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))
  (setq lsp-java-vmargs '("-XX:+UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90" "-Xmx8G" "-Xms1024m"))
  )
#+end_src

** Javascript/Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :config
    ;; (add-to-list 'major-mode-remap-alist '(typescript-mode . typescript-ts-mode))
    ;; (setq typescript-ts-mode-indent-offset 4)
    (setq typescript-indent-level 4)
    )
#+end_src


*** restclient
#+begin_src emacs-lisp
(use-package restclient
  :config
  (setq auto-mode-alist
        (append
         '(("\\.http\\'" . restclient-mode))
         auto-mode-alist))
  )
#+end_src

** rust
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src


** lua
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

** yaml
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src


** ocaml

#+begin_src emacs-lisp
(use-package tuareg)
#+end_src


** latex

#+begin_src emacs-lisp
(use-package tex
  :defer t
  :ensure auctex
  :config
  (add-hook 'LaTeX-mode-hook #'flyspell-mode)
  (setq TeX-auto-save t)
  (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)
  )
#+end_src

#+begin_src emacs-lisp
(use-package magic-latex-buffer
  :config
  (add-hook 'latex-mode-hook 'magic-latex-buffer))
#+end_src

*** org-auctex
#+begin_src emacs-lisp
(quelpa '(org-auctex
          :fetcher github
          :repo "karthink/org-auctex"))

(use-package org-auctex
  :ensure nil
  :after auctex)
#+end_src

** csv
#+begin_src emacs-lisp
(use-package csv-mode)
#+end_src

** dtrt-indent
#+begin_src emacs-lisp
(use-package dtrt-indent
  :config
  (dtrt-indent-global-mode))
#+end_src

** cmake
#+begin_src emacs-lisp
(use-package cmake-mode)
#+end_src

** dot
#+begin_src emacs-lisp
(use-package graphviz-dot-mode)
#+end_src

* pdf

** pdf-tools
#+begin_src emacs-lisp
;; (quelpa '(pdf-tools
;;           :fetcher github
;;           :repo "ST-Saint/pdf-tools"
;;           :branch "pdf-roll"
;;           :files ("lisp/*.el"
;;                   "README"
;;                   ("build" "Makefile")
;;                   ("build" "server")
;;                   (:exclude "lisp/tablist.el" "lisp/tablist-filter.el"))))

(use-package pdf-tools
  ;; :ensure nil
  :config
  (with-eval-after-load 'pdf-tools
    (pdf-tools-install))
  (set-face-attribute 'pdf-view-region nil :inherit 'highlight)
  ;; (define-key pdf-view-roll-minor-mode-map (kbd "<wheel-up>") (lambda () (interactive) (pdf-view-previous-line-or-previous-page 2)))
  ;; (define-key pdf-view-roll-minor-mode-map (kbd "<wheel-down>") (lambda () (interactive) (pdf-view-next-line-or-next-page 2)))
  )
#+end_src


** image-roll
#+begin_src emacs-lisp
;; (quelpa '(image-roll
;;             :fetcher github
;;             :repo "dalanicolai/image-roll.el"))

;; (use-package image-roll
;;   :config
;;   (add-hook 'pdf-view-mode-hook #'pdf-view-roll-minor-mode))
#+end_src

** org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :init
    (setq org-noter-notes-search-path (list (concat org-directory "literature/note")))
    (setq org-noter-always-create-frame nil
          org-noter-notes-window-location 'other-frame)
    (setq org-noter-max-short-selected-text-length most-positive-fixnum)
    (setq org-noter-doc-split-fraction '(0.6 . 0.4))
    :config
    (meow-leader-define-key
     '("n o" . org-noter)))
#+end_src

** org-pdftools
#+begin_src emacs-lisp
  (quelpa '(org-pdftools
            :fetcher github
            :repo "ST-Saint/org-pdftools"))

  (quelpa '(org-noter-pdftools
            :fetcher github
            :repo "ST-Saint/org-pdftools"))

  (use-package org-pdftools
    :ensure nil
    :after pdf-tools
    :hook (org-mode . org-pdftools-setup-link))

  (use-package org-noter-pdftools
    :ensure nil
    :after org-pdftools
    :bind
    (:map org-noter-notes-mode-map
          ("C-." . #'org-noter-pdftools-activate-org-note)
          ("M-." . #'org-noter-pdftools-embed-org-note-to-pdf))
    (:map pdf-view-mode-map
          ("C-c m i i" . #'org-noter-pdftools-insert-precise-note-underline)
          ("C-c m i u" . #'org-noter-pdftools-insert-precise-note-underline)
          ("C-c m i h" . #'org-noter-pdftools-insert-precise-note-highlight)
          ("C-c m i s" . #'org-noter-pdftools-insert-precise-note-squiggly)
          ("C-a" . #'pdf-view-align-left)
          ("C-e" . #'pdf-view-align-right)
          ("M-i" . #'org-noter-pdftools-insert-precise-note-underline)
          ("C-l" . #'pdf-view-center-in-window))

    :config
    (setq org-noter-pdftools-insert-content-heading nil)

    (with-eval-after-load 'pdf-annot (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

** BibTeX

*** citar

#+begin_src emacs-lisp
  (use-package citar
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup)
    :config
    (setq citar-bibliography '("~/org/literature/references.bib"))
    (setq org-cite-insert-processor 'citar)
    (setq org-cite-follow-processor 'citar)
    (setq org-cite-activate-processor 'citar)
    (setq citar-symbols
          `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
            (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
            (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
    (setq citar-library-paths '("~/org/literature/pdf/")
          citar-notes-paths '("~/org/literature/note/")
          citar-library-file-extensions '("pdf")))
#+end_src

* shell

#+begin_src emacs-lisp
(setq sh-shell "/bin/zsh")
#+end_src

** vterm
#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq vterm-shell "/bin/zsh")

  (setq vterm-buffer-name-string "vterm %s")
  (setq vterm-max-scrollback 65536)
  (meow-leader-define-key
   '("o t" . vterm)))
#+end_src

** exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

#+end_src


* docker
#+begin_src emacs-lisp
(use-package docker)
#+end_src

* undo
** undo-fu-session
#+begin_src emacs-lisp
(use-package undo-fu)
(use-package undo-fu-session
  :config
  (global-undo-fu-session-mode))
#+end_src

** vundo
#+begin_src emacs-lisp
(use-package vundo)
#+end_src

* EAF
#+begin_src emacs-lisp :tangle no
(use-package eaf
  :ensure nil
  :load-path "~/.emacs.d/quelpa/build/eaf"
  :config
  (require 'eaf-demo)
  (require 'eaf-browser))
#+end_src


* email
** mu4e
#+begin_src emacs-lisp
  (use-package pinentry
    :init
    (setq epg-pinentry-mode 'loopback)
    (pinentry-start))

  (use-package mu4e
    :ensure nil
    :load-path (lambda ()
                 (cond
                  ((string-equal system-type "windows-nt") ; windows
                   "")
                  ((string-equal system-type "darwin") ; macOS
                   "/opt/homebrew/Cellar/mu/1.10.7/share/emacs/site-lisp/mu/mu4e/")
                  ((string-equal system-type "gnu/linux") ; linux
                   "/usr/share/emacs/site-lisp/mu4e/")))
    :after pinentry
    :config
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-confirm-quit nil)
    (setq mu4e-hide-index-messages t)
    (setq message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")

    (defun mu4e~read-mail-content (content-type)
      (interactive)
      (let ((mail-path (mu4e-message-readable-path)))
        (with-temp-buffer
          (insert-file-contents mail-path)
          (let ((file-contents (buffer-string)))
            (pcase content-type
              ("html"
               (let ((boundary (progn (string-match "boundary=\"\?\\(.+?\\)\"\?$" file-contents)
                                      (match-string 1 file-contents))))
                 (if boundary
                     (let ((start (progn (search-forward "content-type: text/html")
                                         (search-forward "

  "))
                                  )
                           (end (- (search-forward (concat "--" boundary)) (+ (length boundary) 3)))
                           )
                       (substring file-contents start end)
                       )
                   )))
              ("text"
               (message "text")))
            )
          )
        )
      )

    (defun mu4e~write-body-to-html (msg)
      "Write MSG's body (either html or text) to a temporary file;
  return the filename."
      (let* ((html (mu4e~read-mail-content "html"))
             (text (mu4e~read-mail-content "text"))
             (tmpfile (mu4e-make-temp-file "html"))
             )
        (unless (or html text)
          (mu4e-error "No body part for this message"))
        (with-temp-buffer
          (insert "<head><meta charset=\"UTF-8\"></head>\n")
          (insert (concat "<p><strong>From</strong>: "
                          (mu4e~action-header-to-html msg :from) "</br>"))
          (insert (concat "<strong>To</strong>: "
                          (mu4e~action-header-to-html msg :to) "</br>"))
          (insert (concat "<strong>Date</strong>: "
                          (format-time-string mu4e-view-date-format (mu4e-message-field msg :date)) "</br>"))
          (insert (concat "<strong>Subject</strong>: " (mu4e-message-field msg :subject) "</p>"))
          (insert (or html (concat "<pre>" text "</pre>")))
          (write-file tmpfile)
          (save-buffer)
          tmpfile)))

    (defun mu4e~action-header-to-html (msg field)
      "Convert the FIELD of MSG to an HTML string."
      (mapconcat
       (lambda(c)
         (let* ((name (when (car c)
                        (replace-regexp-in-string "[[:cntrl:]]" "" (car c))))
                (email (when (cdr c)
                         (replace-regexp-in-string "[[:cntrl:]]" "" (cdr c))))
                (addr (if mu4e-view-show-addresses
                          (if name (format "%s <%s>" name email) email)
                        (or name email))) ;; name may be nil
                ;; Escape HTML entities
                (addr (replace-regexp-in-string "&" "&amp;" addr))
                (addr (replace-regexp-in-string "<" "&lt;" addr))
                (addr (replace-regexp-in-string ">" "&gt;" addr)))
           addr))
       (mu4e-message-field msg field) ", "))

    (defun mu4e-action-save-to-pdf (msg)
      (let* ((date (mu4e-message-field msg :date))
             (infile (mu4e~write-body-to-html msg))
             (outfile (format-time-string "%Y-%m-%d%H%M%S.pdf" date)))
        (with-temp-buffer
          (shell-command
           (format "wkhtmltopdf %s /tmp/%s" infile outfile) t))))

    (add-to-list 'mu4e-view-actions '("pdf" . mu4e-action-save-to-pdf) t)

    (setq mail-user-agent 'mu4e-user-agent
          read-mail-command 'mu4e)

    (setq mu4e-update-interval 120
          mu4e-index-update-error-continue 't
          mu4e-index-update-error-warning 't
          mu4e-index-update-in-background 't
          mu4e-html2text-command 'mu4e-shr2text)

    (setq mu4e-headers-include-related nil
          mu4e-headers-fields '(
                                (:human-date . 12)
                                (:flags . 10)
                                (:mailing-list . 15)
                                (:from-or-to . 25)
                                (:subject)))

    (add-hook 'mu4e-context-changed-hook #'mu4e)

    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-contexts
          (list
           (make-mu4e-context
            :name "gmail"
            :match-func (lambda (msg)
                          (when msg
                            (string-match-p "/gmail" (mu4e-message-field msg :maildir))))

            :vars '((user-mail-address . "st.saint.wyy@gmail.com"  )
                    (user-full-name . "Yayu Wang" )
                    (smtpmail-smtp-user "st.saint.wyy@gmail.com")
                    (smtpmail-smtp-server "smtp.gmail.com")
                    (mu4e-sent-folder       . "/gmail/sent")
                    (mu4e-drafts-folder     . "/gmail/drafts")
                    (mu4e-trash-folder      . "/gmail/trash")
                    (mu4e-refile-folder     . "/gmail/all")
                    (mu4e-bookmarks . (
                                       (:name "Important" :query "maildir:/gmail/Important" :key ?i)
                                       (:name "Unread messages" :query "maildir:/gmail/All flag:unread AND NOT flag:trashed" :key ?u)
                                       (:name "Today's messages" :query "maildir:/gmail/All date:today..now" :key ?t)
                                       (:name "Last 7 days" :query "maildir:/gmail/All date:7d..now" :key ?w)
                                       (:name "Last month" :query "maildir:/gmail/All date:4w..now" :key ?m)
                                       (:name "Messages with attachments" :query "maildir:/gmail/All flag:attach" :key ?a)
                                       (:name "Flagged messages" :query "maildir:/gmail/All flag:flagged" :key ?f)))
                    (mu4e-maildir-shortcuts . ( (:maildir "/gmail/INBOX" :key ?b)
                                                (:maildir "/gmail/sent"  :key ?s)
                                                (:maildir "/gmail/drafts"      :key ?d)
                                                (:maildir "/gmail/trash"      :key ?t)
                                                (:maildir "/gmail/all"   :key ?a)))
                    ))

           (make-mu4e-context
            :name "ubc"
            :match-func (lambda (msg)
                          (when msg
                            (string-match-p "/UBC" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "yayuwang@cs.ubc.ca" )
                    (user-full-name . "Yayu Wang" )
                    (smtpmail-smtp-user "yayuwang@cs.ubc.ca")
                    (smtpmail-smtp-server "mail.cs.ubc.ca")
                    (mu4e-sent-folder       . "/UBC/Sent")
                    (mu4e-drafts-folder     . "/UBC/Draft")
                    (mu4e-trash-folder      . "/UBC/Trash")
                    (mu4e-refile-folder     . "/UBC/All")
                    (mu4e-bookmarks . (
                                       (:name "Unread messages" :query "maildir:/UBC/Inbox flag:unread AND NOT flag:trashed" :key ?u)
                                       (:name "Today's messages" :query "maildir:/UBC/Inbox date:today..now" :key ?t)
                                       (:name "Last 7 days" :query "maildir:/UBC/Inbox date:7d..now" :key ?w)
                                       (:name "Last month" :query "maildir:/UBC/Inbox date:4w..now" :key ?m)
                                       (:name "Messages with attachments" :query "maildir:/UBC/Inbox flag:attach" :key ?a)
                                       (:name "Flagged messages" :query "maildir:/UBC/Inbox flag:flagged" :key ?f)))
                    (mu4e-maildir-shortcuts . ((:maildir "/UBC/Inbox" :key ?i)
                                               (:maildir "/UBC/Sent" :key ?s)
                                               (:maildir "/UBC/Draft" :key ?d)
                                               (:maildir "/UBC/Trash" :key ?t)))
                    ))))

    (setq sendmail-program (executable-find "msmtp")
          send-mail-function #'smtpmail-send-it
          smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
          smtpmail-debug-info 't
          smtpmail-stream-type 'ssl
          smtpmail-smtp-service 465
          mail-specify-envelope-from 't
          mail-envelope-from 'header
          message-sendmail-envelope-from 'header
          message-sendmail-f-is-evil 't
          message-sendmail-extra-arguments '("--read-envelope-from")
          message-send-mail-function #'message-send-mail-with-sendmail)

    (meow-leader-define-key
     '("o m" . (lambda ()
                 (interactive)
                 (if (find "mu4e" persp-names-cache :test #'equal)
                     (if (equal "mu4e" persp-last-persp-name)
                         (mu4e)
                       (persp-switch "mu4e"))
                   (persp-switch "mu4e")
                   (mu4e)))))
    )
#+end_src
*** mu4e-views
#+begin_src emacs-lisp
  (use-package mu4e-views
    :config
    (setq mu4e-views-default-view-method "html")
    (mu4e-views-mu4e-use-view-msg-method "html")
    (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window))
#+end_src


** org-msg
#+begin_src emacs-lisp
  (use-package org-msg
    :after mu4e
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
          org-msg-startup "hidestars indent inlineimages"
          org-msg-greeting-fmt "\nHi%s,\n\n"
          org-msg-recipient-names '(("yayuwang@cs.ubc.ca" . "Yayu Wang"))
          org-msg-greeting-name-limit 3
          org-msg-default-alternatives '((new                 . (text html))
                                         (reply-to-html	. (text html))
                                         (reply-to-text	. (text)))
          org-msg-convert-citation t)

    ;; (setq org-msg-enforce-css '((p nil
    ;; ((font-size . "16pt")))
    ;; (li nil
    ;; ((font-size . "16pt")))))
    (setq org-msg-signature "#+begin_signature\nBest,\n\n-- *Yayu*\n#+end_signature")
    (org-msg-mode))
#+end_src

* irc

** circe
#+begin_src emacs-lisp :tangle yes
  (use-package circe
    :config
    (setq circe-network-options
          '(("asahi"
             :use-tls t
             :host "irc.oftc.net"
             :port 6697
             :nick "yayu"
             :user "yayu"
             :realname "yayu"
             :channels ("#asahi" "#asahi-dev")
             ))))


  (use-package circe-notifications
    :config
    (add-hook 'circe-server-connected-hook 'enable-circe-notifications))
#+end_src

* misc
** subword
#+begin_src emacs-lisp
(use-package subword
  ;; :hook (after-init . global-subword-mode)
  )
#+end_src

* debug
** gdb
#+begin_src emacs-lisp
(setq gdb-stack-buffer-addresses t)
#+end_src

** commond-log
#+begin_src emacs-lisp
(use-package command-log-mode
  :custom
  (command-log-mode-key-binding-open-log nil)
  :config
  (global-command-log-mode))
#+end_src
